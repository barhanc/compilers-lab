Grammar:

Rule 0     S' -> program
Rule 1     program -> statementseq
Rule 2     expr -> array
Rule 3     expr -> expr [ exprseq ]  [precedence=left, level=8]
Rule 4     expr -> ZEROS ( expr )
Rule 5     expr -> ONES ( expr )
Rule 6     expr -> EYE ( expr )
Rule 7     expr -> STRING
Rule 8     expr -> FLOATNUM
Rule 9     expr -> INTNUM
Rule 10    expr -> ID
Rule 11    expr -> expr '  [precedence=left, level=7]
Rule 12    expr -> SUB expr  [precedence=right, level=6]
Rule 13    expr -> ( expr )
Rule 14    expr -> expr : expr  [precedence=nonassoc, level=2]
Rule 15    expr -> expr LE expr  [precedence=nonassoc, level=3]
Rule 16    expr -> expr LT expr  [precedence=nonassoc, level=3]
Rule 17    expr -> expr GE expr  [precedence=nonassoc, level=3]
Rule 18    expr -> expr GT expr  [precedence=nonassoc, level=3]
Rule 19    expr -> expr NE expr  [precedence=nonassoc, level=3]
Rule 20    expr -> expr EQ expr  [precedence=nonassoc, level=3]
Rule 21    expr -> expr DDIV expr  [precedence=left, level=5]
Rule 22    expr -> expr DMUL expr  [precedence=left, level=5]
Rule 23    expr -> expr DSUB expr  [precedence=left, level=4]
Rule 24    expr -> expr DADD expr  [precedence=left, level=4]
Rule 25    expr -> expr DIV expr  [precedence=left, level=5]
Rule 26    expr -> expr MUL expr  [precedence=left, level=5]
Rule 27    expr -> expr SUB expr  [precedence=left, level=4]
Rule 28    expr -> expr ADD expr  [precedence=left, level=4]
Rule 29    exprseq -> exprseq , expr
Rule 30    exprseq -> expr
Rule 31    array -> [ elements ]
Rule 32    elements -> elements , expr
Rule 33    elements -> expr
Rule 34    statement -> { statementseq }
Rule 35    statement -> FOR ID = exprseq statement  [precedence=right, level=1]
Rule 36    statement -> WHILE ( expr ) statement
Rule 37    statement -> IF ( expr ) statement ELSE statement  [precedence=nonassoc, level=10]
Rule 38    statement -> IF ( expr ) statement  [precedence=nonassoc, level=9]
Rule 39    statement -> expr IDIV expr ;
Rule 40    statement -> expr IMUL expr ;
Rule 41    statement -> expr ISUB expr ;
Rule 42    statement -> expr IADD expr ;
Rule 43    statement -> expr = expr ;
Rule 44    statement -> CONTINUE ;
Rule 45    statement -> BREAK ;
Rule 46    statement -> RETURN exprseq ;
Rule 47    statement -> PRINT exprseq ;
Rule 48    statementseq -> statement
Rule 49    statementseq -> statement statementseq

Terminals, with rules where they appear:

'                    : 11
(                    : 4 5 6 13 36 37 38
)                    : 4 5 6 13 36 37 38
,                    : 29 32
:                    : 14
;                    : 39 40 41 42 43 44 45 46 47
=                    : 35 43
ADD                  : 28
BREAK                : 45
CONTINUE             : 44
DADD                 : 24
DDIV                 : 21
DIV                  : 25
DMUL                 : 22
DSUB                 : 23
ELSE                 : 37
EQ                   : 20
EYE                  : 6
FLOATNUM             : 8
FOR                  : 35
GE                   : 17
GT                   : 18
IADD                 : 42
ID                   : 10 35
IDIV                 : 39
IF                   : 37 38
IMUL                 : 40
INTNUM               : 9
ISUB                 : 41
LE                   : 15
LT                   : 16
MUL                  : 26
NE                   : 19
ONES                 : 5
PRINT                : 47
RETURN               : 46
STRING               : 7
SUB                  : 12 27
WHILE                : 36
ZEROS                : 4
[                    : 3 31
]                    : 3 31
error                : 
{                    : 34
}                    : 34

Nonterminals, with rules where they appear:

array                : 2
elements             : 31 32
expr                 : 3 4 5 6 11 12 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 30 32 33 36 37 38 39 39 40 40 41 41 42 42 43 43
exprseq              : 3 29 35 46 47
program              : 0
statement            : 35 36 37 37 38 48 49
statementseq         : 1 34 49


state 0

    (0) S' -> . program
    (1) program -> . statementseq
    (48) statementseq -> . statement
    (49) statementseq -> . statement statementseq
    (34) statement -> . { statementseq }
    (35) statement -> . FOR ID = exprseq statement
    (36) statement -> . WHILE ( expr ) statement
    (37) statement -> . IF ( expr ) statement ELSE statement
    (38) statement -> . IF ( expr ) statement
    (39) statement -> . expr IDIV expr ;
    (40) statement -> . expr IMUL expr ;
    (41) statement -> . expr ISUB expr ;
    (42) statement -> . expr IADD expr ;
    (43) statement -> . expr = expr ;
    (44) statement -> . CONTINUE ;
    (45) statement -> . BREAK ;
    (46) statement -> . RETURN exprseq ;
    (47) statement -> . PRINT exprseq ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    program                        shift and go to state 1
    statementseq                   shift and go to state 2
    statement                      shift and go to state 3
    expr                           shift and go to state 9
    array                          shift and go to state 15

state 1

    (0) S' -> program .


state 2

    (1) program -> statementseq .
    $end            reduce using rule 1 (program -> statementseq .)


state 3

    (48) statementseq -> statement .
    (49) statementseq -> statement . statementseq
    (48) statementseq -> . statement
    (49) statementseq -> . statement statementseq
    (34) statement -> . { statementseq }
    (35) statement -> . FOR ID = exprseq statement
    (36) statement -> . WHILE ( expr ) statement
    (37) statement -> . IF ( expr ) statement ELSE statement
    (38) statement -> . IF ( expr ) statement
    (39) statement -> . expr IDIV expr ;
    (40) statement -> . expr IMUL expr ;
    (41) statement -> . expr ISUB expr ;
    (42) statement -> . expr IADD expr ;
    (43) statement -> . expr = expr ;
    (44) statement -> . CONTINUE ;
    (45) statement -> . BREAK ;
    (46) statement -> . RETURN exprseq ;
    (47) statement -> . PRINT exprseq ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    $end            reduce using rule 48 (statementseq -> statement .)
    }               reduce using rule 48 (statementseq -> statement .)
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    statement                      shift and go to state 3
    statementseq                   shift and go to state 24
    expr                           shift and go to state 9
    array                          shift and go to state 15

state 4

    (34) statement -> { . statementseq }
    (48) statementseq -> . statement
    (49) statementseq -> . statement statementseq
    (34) statement -> . { statementseq }
    (35) statement -> . FOR ID = exprseq statement
    (36) statement -> . WHILE ( expr ) statement
    (37) statement -> . IF ( expr ) statement ELSE statement
    (38) statement -> . IF ( expr ) statement
    (39) statement -> . expr IDIV expr ;
    (40) statement -> . expr IMUL expr ;
    (41) statement -> . expr ISUB expr ;
    (42) statement -> . expr IADD expr ;
    (43) statement -> . expr = expr ;
    (44) statement -> . CONTINUE ;
    (45) statement -> . BREAK ;
    (46) statement -> . RETURN exprseq ;
    (47) statement -> . PRINT exprseq ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    statementseq                   shift and go to state 25
    statement                      shift and go to state 3
    expr                           shift and go to state 9
    array                          shift and go to state 15

state 5

    (35) statement -> FOR . ID = exprseq statement
    ID              shift and go to state 26


state 6

    (10) expr -> ID .
    IDIV            reduce using rule 10 (expr -> ID .)
    IMUL            reduce using rule 10 (expr -> ID .)
    ISUB            reduce using rule 10 (expr -> ID .)
    IADD            reduce using rule 10 (expr -> ID .)
    =               reduce using rule 10 (expr -> ID .)
    [               reduce using rule 10 (expr -> ID .)
    '               reduce using rule 10 (expr -> ID .)
    :               reduce using rule 10 (expr -> ID .)
    LE              reduce using rule 10 (expr -> ID .)
    LT              reduce using rule 10 (expr -> ID .)
    GE              reduce using rule 10 (expr -> ID .)
    GT              reduce using rule 10 (expr -> ID .)
    NE              reduce using rule 10 (expr -> ID .)
    EQ              reduce using rule 10 (expr -> ID .)
    DDIV            reduce using rule 10 (expr -> ID .)
    DMUL            reduce using rule 10 (expr -> ID .)
    DSUB            reduce using rule 10 (expr -> ID .)
    DADD            reduce using rule 10 (expr -> ID .)
    DIV             reduce using rule 10 (expr -> ID .)
    MUL             reduce using rule 10 (expr -> ID .)
    SUB             reduce using rule 10 (expr -> ID .)
    ADD             reduce using rule 10 (expr -> ID .)
    )               reduce using rule 10 (expr -> ID .)
    ;               reduce using rule 10 (expr -> ID .)
    ,               reduce using rule 10 (expr -> ID .)
    ]               reduce using rule 10 (expr -> ID .)
    {               reduce using rule 10 (expr -> ID .)
    FOR             reduce using rule 10 (expr -> ID .)
    WHILE           reduce using rule 10 (expr -> ID .)
    IF              reduce using rule 10 (expr -> ID .)
    CONTINUE        reduce using rule 10 (expr -> ID .)
    BREAK           reduce using rule 10 (expr -> ID .)
    RETURN          reduce using rule 10 (expr -> ID .)
    PRINT           reduce using rule 10 (expr -> ID .)
    ZEROS           reduce using rule 10 (expr -> ID .)
    ONES            reduce using rule 10 (expr -> ID .)
    EYE             reduce using rule 10 (expr -> ID .)
    STRING          reduce using rule 10 (expr -> ID .)
    FLOATNUM        reduce using rule 10 (expr -> ID .)
    INTNUM          reduce using rule 10 (expr -> ID .)
    ID              reduce using rule 10 (expr -> ID .)
    (               reduce using rule 10 (expr -> ID .)


state 7

    (36) statement -> WHILE . ( expr ) statement
    (               shift and go to state 27


state 8

    (13) expr -> ( . expr )
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 28
    array                          shift and go to state 15

state 9

    (39) statement -> expr . IDIV expr ;
    (40) statement -> expr . IMUL expr ;
    (41) statement -> expr . ISUB expr ;
    (42) statement -> expr . IADD expr ;
    (43) statement -> expr . = expr ;
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            shift and go to state 29
    IMUL            shift and go to state 30
    ISUB            shift and go to state 31
    IADD            shift and go to state 32
    =               shift and go to state 33
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 10

    (37) statement -> IF . ( expr ) statement ELSE statement
    (38) statement -> IF . ( expr ) statement
    (               shift and go to state 51


state 11

    (44) statement -> CONTINUE . ;
    ;               shift and go to state 52


state 12

    (45) statement -> BREAK . ;
    ;               shift and go to state 53


state 13

    (46) statement -> RETURN . exprseq ;
    (29) exprseq -> . exprseq , expr
    (30) exprseq -> . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    exprseq                        shift and go to state 54
    expr                           shift and go to state 55
    array                          shift and go to state 15

state 14

    (47) statement -> PRINT . exprseq ;
    (29) exprseq -> . exprseq , expr
    (30) exprseq -> . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    exprseq                        shift and go to state 56
    expr                           shift and go to state 55
    array                          shift and go to state 15

state 15

    (2) expr -> array .
    IDIV            reduce using rule 2 (expr -> array .)
    IMUL            reduce using rule 2 (expr -> array .)
    ISUB            reduce using rule 2 (expr -> array .)
    IADD            reduce using rule 2 (expr -> array .)
    =               reduce using rule 2 (expr -> array .)
    [               reduce using rule 2 (expr -> array .)
    '               reduce using rule 2 (expr -> array .)
    :               reduce using rule 2 (expr -> array .)
    LE              reduce using rule 2 (expr -> array .)
    LT              reduce using rule 2 (expr -> array .)
    GE              reduce using rule 2 (expr -> array .)
    GT              reduce using rule 2 (expr -> array .)
    NE              reduce using rule 2 (expr -> array .)
    EQ              reduce using rule 2 (expr -> array .)
    DDIV            reduce using rule 2 (expr -> array .)
    DMUL            reduce using rule 2 (expr -> array .)
    DSUB            reduce using rule 2 (expr -> array .)
    DADD            reduce using rule 2 (expr -> array .)
    DIV             reduce using rule 2 (expr -> array .)
    MUL             reduce using rule 2 (expr -> array .)
    SUB             reduce using rule 2 (expr -> array .)
    ADD             reduce using rule 2 (expr -> array .)
    )               reduce using rule 2 (expr -> array .)
    ;               reduce using rule 2 (expr -> array .)
    ,               reduce using rule 2 (expr -> array .)
    ]               reduce using rule 2 (expr -> array .)
    {               reduce using rule 2 (expr -> array .)
    FOR             reduce using rule 2 (expr -> array .)
    WHILE           reduce using rule 2 (expr -> array .)
    IF              reduce using rule 2 (expr -> array .)
    CONTINUE        reduce using rule 2 (expr -> array .)
    BREAK           reduce using rule 2 (expr -> array .)
    RETURN          reduce using rule 2 (expr -> array .)
    PRINT           reduce using rule 2 (expr -> array .)
    ZEROS           reduce using rule 2 (expr -> array .)
    ONES            reduce using rule 2 (expr -> array .)
    EYE             reduce using rule 2 (expr -> array .)
    STRING          reduce using rule 2 (expr -> array .)
    FLOATNUM        reduce using rule 2 (expr -> array .)
    INTNUM          reduce using rule 2 (expr -> array .)
    ID              reduce using rule 2 (expr -> array .)
    (               reduce using rule 2 (expr -> array .)


state 16

    (31) array -> [ . elements ]
    (32) elements -> . elements , expr
    (33) elements -> . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    elements                       shift and go to state 57
    expr                           shift and go to state 58
    array                          shift and go to state 15

state 17

    (4) expr -> ZEROS . ( expr )
    (               shift and go to state 59


state 18

    (5) expr -> ONES . ( expr )
    (               shift and go to state 60


state 19

    (6) expr -> EYE . ( expr )
    (               shift and go to state 61


state 20

    (7) expr -> STRING .
    IDIV            reduce using rule 7 (expr -> STRING .)
    IMUL            reduce using rule 7 (expr -> STRING .)
    ISUB            reduce using rule 7 (expr -> STRING .)
    IADD            reduce using rule 7 (expr -> STRING .)
    =               reduce using rule 7 (expr -> STRING .)
    [               reduce using rule 7 (expr -> STRING .)
    '               reduce using rule 7 (expr -> STRING .)
    :               reduce using rule 7 (expr -> STRING .)
    LE              reduce using rule 7 (expr -> STRING .)
    LT              reduce using rule 7 (expr -> STRING .)
    GE              reduce using rule 7 (expr -> STRING .)
    GT              reduce using rule 7 (expr -> STRING .)
    NE              reduce using rule 7 (expr -> STRING .)
    EQ              reduce using rule 7 (expr -> STRING .)
    DDIV            reduce using rule 7 (expr -> STRING .)
    DMUL            reduce using rule 7 (expr -> STRING .)
    DSUB            reduce using rule 7 (expr -> STRING .)
    DADD            reduce using rule 7 (expr -> STRING .)
    DIV             reduce using rule 7 (expr -> STRING .)
    MUL             reduce using rule 7 (expr -> STRING .)
    SUB             reduce using rule 7 (expr -> STRING .)
    ADD             reduce using rule 7 (expr -> STRING .)
    )               reduce using rule 7 (expr -> STRING .)
    ;               reduce using rule 7 (expr -> STRING .)
    ,               reduce using rule 7 (expr -> STRING .)
    ]               reduce using rule 7 (expr -> STRING .)
    {               reduce using rule 7 (expr -> STRING .)
    FOR             reduce using rule 7 (expr -> STRING .)
    WHILE           reduce using rule 7 (expr -> STRING .)
    IF              reduce using rule 7 (expr -> STRING .)
    CONTINUE        reduce using rule 7 (expr -> STRING .)
    BREAK           reduce using rule 7 (expr -> STRING .)
    RETURN          reduce using rule 7 (expr -> STRING .)
    PRINT           reduce using rule 7 (expr -> STRING .)
    ZEROS           reduce using rule 7 (expr -> STRING .)
    ONES            reduce using rule 7 (expr -> STRING .)
    EYE             reduce using rule 7 (expr -> STRING .)
    STRING          reduce using rule 7 (expr -> STRING .)
    FLOATNUM        reduce using rule 7 (expr -> STRING .)
    INTNUM          reduce using rule 7 (expr -> STRING .)
    ID              reduce using rule 7 (expr -> STRING .)
    (               reduce using rule 7 (expr -> STRING .)


state 21

    (8) expr -> FLOATNUM .
    IDIV            reduce using rule 8 (expr -> FLOATNUM .)
    IMUL            reduce using rule 8 (expr -> FLOATNUM .)
    ISUB            reduce using rule 8 (expr -> FLOATNUM .)
    IADD            reduce using rule 8 (expr -> FLOATNUM .)
    =               reduce using rule 8 (expr -> FLOATNUM .)
    [               reduce using rule 8 (expr -> FLOATNUM .)
    '               reduce using rule 8 (expr -> FLOATNUM .)
    :               reduce using rule 8 (expr -> FLOATNUM .)
    LE              reduce using rule 8 (expr -> FLOATNUM .)
    LT              reduce using rule 8 (expr -> FLOATNUM .)
    GE              reduce using rule 8 (expr -> FLOATNUM .)
    GT              reduce using rule 8 (expr -> FLOATNUM .)
    NE              reduce using rule 8 (expr -> FLOATNUM .)
    EQ              reduce using rule 8 (expr -> FLOATNUM .)
    DDIV            reduce using rule 8 (expr -> FLOATNUM .)
    DMUL            reduce using rule 8 (expr -> FLOATNUM .)
    DSUB            reduce using rule 8 (expr -> FLOATNUM .)
    DADD            reduce using rule 8 (expr -> FLOATNUM .)
    DIV             reduce using rule 8 (expr -> FLOATNUM .)
    MUL             reduce using rule 8 (expr -> FLOATNUM .)
    SUB             reduce using rule 8 (expr -> FLOATNUM .)
    ADD             reduce using rule 8 (expr -> FLOATNUM .)
    )               reduce using rule 8 (expr -> FLOATNUM .)
    ;               reduce using rule 8 (expr -> FLOATNUM .)
    ,               reduce using rule 8 (expr -> FLOATNUM .)
    ]               reduce using rule 8 (expr -> FLOATNUM .)
    {               reduce using rule 8 (expr -> FLOATNUM .)
    FOR             reduce using rule 8 (expr -> FLOATNUM .)
    WHILE           reduce using rule 8 (expr -> FLOATNUM .)
    IF              reduce using rule 8 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 8 (expr -> FLOATNUM .)
    BREAK           reduce using rule 8 (expr -> FLOATNUM .)
    RETURN          reduce using rule 8 (expr -> FLOATNUM .)
    PRINT           reduce using rule 8 (expr -> FLOATNUM .)
    ZEROS           reduce using rule 8 (expr -> FLOATNUM .)
    ONES            reduce using rule 8 (expr -> FLOATNUM .)
    EYE             reduce using rule 8 (expr -> FLOATNUM .)
    STRING          reduce using rule 8 (expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 8 (expr -> FLOATNUM .)
    INTNUM          reduce using rule 8 (expr -> FLOATNUM .)
    ID              reduce using rule 8 (expr -> FLOATNUM .)
    (               reduce using rule 8 (expr -> FLOATNUM .)


state 22

    (9) expr -> INTNUM .
    IDIV            reduce using rule 9 (expr -> INTNUM .)
    IMUL            reduce using rule 9 (expr -> INTNUM .)
    ISUB            reduce using rule 9 (expr -> INTNUM .)
    IADD            reduce using rule 9 (expr -> INTNUM .)
    =               reduce using rule 9 (expr -> INTNUM .)
    [               reduce using rule 9 (expr -> INTNUM .)
    '               reduce using rule 9 (expr -> INTNUM .)
    :               reduce using rule 9 (expr -> INTNUM .)
    LE              reduce using rule 9 (expr -> INTNUM .)
    LT              reduce using rule 9 (expr -> INTNUM .)
    GE              reduce using rule 9 (expr -> INTNUM .)
    GT              reduce using rule 9 (expr -> INTNUM .)
    NE              reduce using rule 9 (expr -> INTNUM .)
    EQ              reduce using rule 9 (expr -> INTNUM .)
    DDIV            reduce using rule 9 (expr -> INTNUM .)
    DMUL            reduce using rule 9 (expr -> INTNUM .)
    DSUB            reduce using rule 9 (expr -> INTNUM .)
    DADD            reduce using rule 9 (expr -> INTNUM .)
    DIV             reduce using rule 9 (expr -> INTNUM .)
    MUL             reduce using rule 9 (expr -> INTNUM .)
    SUB             reduce using rule 9 (expr -> INTNUM .)
    ADD             reduce using rule 9 (expr -> INTNUM .)
    )               reduce using rule 9 (expr -> INTNUM .)
    ;               reduce using rule 9 (expr -> INTNUM .)
    ,               reduce using rule 9 (expr -> INTNUM .)
    ]               reduce using rule 9 (expr -> INTNUM .)
    {               reduce using rule 9 (expr -> INTNUM .)
    FOR             reduce using rule 9 (expr -> INTNUM .)
    WHILE           reduce using rule 9 (expr -> INTNUM .)
    IF              reduce using rule 9 (expr -> INTNUM .)
    CONTINUE        reduce using rule 9 (expr -> INTNUM .)
    BREAK           reduce using rule 9 (expr -> INTNUM .)
    RETURN          reduce using rule 9 (expr -> INTNUM .)
    PRINT           reduce using rule 9 (expr -> INTNUM .)
    ZEROS           reduce using rule 9 (expr -> INTNUM .)
    ONES            reduce using rule 9 (expr -> INTNUM .)
    EYE             reduce using rule 9 (expr -> INTNUM .)
    STRING          reduce using rule 9 (expr -> INTNUM .)
    FLOATNUM        reduce using rule 9 (expr -> INTNUM .)
    INTNUM          reduce using rule 9 (expr -> INTNUM .)
    ID              reduce using rule 9 (expr -> INTNUM .)
    (               reduce using rule 9 (expr -> INTNUM .)


state 23

    (12) expr -> SUB . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 62
    array                          shift and go to state 15

state 24

    (49) statementseq -> statement statementseq .
    $end            reduce using rule 49 (statementseq -> statement statementseq .)
    }               reduce using rule 49 (statementseq -> statement statementseq .)


state 25

    (34) statement -> { statementseq . }
    }               shift and go to state 63


state 26

    (35) statement -> FOR ID . = exprseq statement
    =               shift and go to state 64


state 27

    (36) statement -> WHILE ( . expr ) statement
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 65
    array                          shift and go to state 15

state 28

    (13) expr -> ( expr . )
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    )               shift and go to state 66
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 29

    (39) statement -> expr IDIV . expr ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 67
    array                          shift and go to state 15

state 30

    (40) statement -> expr IMUL . expr ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 68
    array                          shift and go to state 15

state 31

    (41) statement -> expr ISUB . expr ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 69
    array                          shift and go to state 15

state 32

    (42) statement -> expr IADD . expr ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 70
    array                          shift and go to state 15

state 33

    (43) statement -> expr = . expr ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 71
    array                          shift and go to state 15

state 34

    (3) expr -> expr [ . exprseq ]
    (29) exprseq -> . exprseq , expr
    (30) exprseq -> . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 55
    exprseq                        shift and go to state 72
    array                          shift and go to state 15

state 35

    (11) expr -> expr ' .
    IDIV            reduce using rule 11 (expr -> expr ' .)
    IMUL            reduce using rule 11 (expr -> expr ' .)
    ISUB            reduce using rule 11 (expr -> expr ' .)
    IADD            reduce using rule 11 (expr -> expr ' .)
    =               reduce using rule 11 (expr -> expr ' .)
    [               reduce using rule 11 (expr -> expr ' .)
    '               reduce using rule 11 (expr -> expr ' .)
    :               reduce using rule 11 (expr -> expr ' .)
    LE              reduce using rule 11 (expr -> expr ' .)
    LT              reduce using rule 11 (expr -> expr ' .)
    GE              reduce using rule 11 (expr -> expr ' .)
    GT              reduce using rule 11 (expr -> expr ' .)
    NE              reduce using rule 11 (expr -> expr ' .)
    EQ              reduce using rule 11 (expr -> expr ' .)
    DDIV            reduce using rule 11 (expr -> expr ' .)
    DMUL            reduce using rule 11 (expr -> expr ' .)
    DSUB            reduce using rule 11 (expr -> expr ' .)
    DADD            reduce using rule 11 (expr -> expr ' .)
    DIV             reduce using rule 11 (expr -> expr ' .)
    MUL             reduce using rule 11 (expr -> expr ' .)
    SUB             reduce using rule 11 (expr -> expr ' .)
    ADD             reduce using rule 11 (expr -> expr ' .)
    )               reduce using rule 11 (expr -> expr ' .)
    ;               reduce using rule 11 (expr -> expr ' .)
    ,               reduce using rule 11 (expr -> expr ' .)
    ]               reduce using rule 11 (expr -> expr ' .)
    {               reduce using rule 11 (expr -> expr ' .)
    FOR             reduce using rule 11 (expr -> expr ' .)
    WHILE           reduce using rule 11 (expr -> expr ' .)
    IF              reduce using rule 11 (expr -> expr ' .)
    CONTINUE        reduce using rule 11 (expr -> expr ' .)
    BREAK           reduce using rule 11 (expr -> expr ' .)
    RETURN          reduce using rule 11 (expr -> expr ' .)
    PRINT           reduce using rule 11 (expr -> expr ' .)
    ZEROS           reduce using rule 11 (expr -> expr ' .)
    ONES            reduce using rule 11 (expr -> expr ' .)
    EYE             reduce using rule 11 (expr -> expr ' .)
    STRING          reduce using rule 11 (expr -> expr ' .)
    FLOATNUM        reduce using rule 11 (expr -> expr ' .)
    INTNUM          reduce using rule 11 (expr -> expr ' .)
    ID              reduce using rule 11 (expr -> expr ' .)
    (               reduce using rule 11 (expr -> expr ' .)


state 36

    (14) expr -> expr : . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 73
    array                          shift and go to state 15

state 37

    (15) expr -> expr LE . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 74
    array                          shift and go to state 15

state 38

    (16) expr -> expr LT . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 75
    array                          shift and go to state 15

state 39

    (17) expr -> expr GE . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 76
    array                          shift and go to state 15

state 40

    (18) expr -> expr GT . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 77
    array                          shift and go to state 15

state 41

    (19) expr -> expr NE . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 78
    array                          shift and go to state 15

state 42

    (20) expr -> expr EQ . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 79
    array                          shift and go to state 15

state 43

    (21) expr -> expr DDIV . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 80
    array                          shift and go to state 15

state 44

    (22) expr -> expr DMUL . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 81
    array                          shift and go to state 15

state 45

    (23) expr -> expr DSUB . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 82
    array                          shift and go to state 15

state 46

    (24) expr -> expr DADD . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 83
    array                          shift and go to state 15

state 47

    (25) expr -> expr DIV . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 84
    array                          shift and go to state 15

state 48

    (26) expr -> expr MUL . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 85
    array                          shift and go to state 15

state 49

    (27) expr -> expr SUB . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 86
    array                          shift and go to state 15

state 50

    (28) expr -> expr ADD . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 87
    array                          shift and go to state 15

state 51

    (37) statement -> IF ( . expr ) statement ELSE statement
    (38) statement -> IF ( . expr ) statement
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 88
    array                          shift and go to state 15

state 52

    (44) statement -> CONTINUE ; .
    {               reduce using rule 44 (statement -> CONTINUE ; .)
    FOR             reduce using rule 44 (statement -> CONTINUE ; .)
    WHILE           reduce using rule 44 (statement -> CONTINUE ; .)
    IF              reduce using rule 44 (statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 44 (statement -> CONTINUE ; .)
    BREAK           reduce using rule 44 (statement -> CONTINUE ; .)
    RETURN          reduce using rule 44 (statement -> CONTINUE ; .)
    PRINT           reduce using rule 44 (statement -> CONTINUE ; .)
    ZEROS           reduce using rule 44 (statement -> CONTINUE ; .)
    ONES            reduce using rule 44 (statement -> CONTINUE ; .)
    EYE             reduce using rule 44 (statement -> CONTINUE ; .)
    STRING          reduce using rule 44 (statement -> CONTINUE ; .)
    FLOATNUM        reduce using rule 44 (statement -> CONTINUE ; .)
    INTNUM          reduce using rule 44 (statement -> CONTINUE ; .)
    ID              reduce using rule 44 (statement -> CONTINUE ; .)
    SUB             reduce using rule 44 (statement -> CONTINUE ; .)
    (               reduce using rule 44 (statement -> CONTINUE ; .)
    [               reduce using rule 44 (statement -> CONTINUE ; .)
    $end            reduce using rule 44 (statement -> CONTINUE ; .)
    }               reduce using rule 44 (statement -> CONTINUE ; .)
    ELSE            reduce using rule 44 (statement -> CONTINUE ; .)


state 53

    (45) statement -> BREAK ; .
    {               reduce using rule 45 (statement -> BREAK ; .)
    FOR             reduce using rule 45 (statement -> BREAK ; .)
    WHILE           reduce using rule 45 (statement -> BREAK ; .)
    IF              reduce using rule 45 (statement -> BREAK ; .)
    CONTINUE        reduce using rule 45 (statement -> BREAK ; .)
    BREAK           reduce using rule 45 (statement -> BREAK ; .)
    RETURN          reduce using rule 45 (statement -> BREAK ; .)
    PRINT           reduce using rule 45 (statement -> BREAK ; .)
    ZEROS           reduce using rule 45 (statement -> BREAK ; .)
    ONES            reduce using rule 45 (statement -> BREAK ; .)
    EYE             reduce using rule 45 (statement -> BREAK ; .)
    STRING          reduce using rule 45 (statement -> BREAK ; .)
    FLOATNUM        reduce using rule 45 (statement -> BREAK ; .)
    INTNUM          reduce using rule 45 (statement -> BREAK ; .)
    ID              reduce using rule 45 (statement -> BREAK ; .)
    SUB             reduce using rule 45 (statement -> BREAK ; .)
    (               reduce using rule 45 (statement -> BREAK ; .)
    [               reduce using rule 45 (statement -> BREAK ; .)
    $end            reduce using rule 45 (statement -> BREAK ; .)
    }               reduce using rule 45 (statement -> BREAK ; .)
    ELSE            reduce using rule 45 (statement -> BREAK ; .)


state 54

    (46) statement -> RETURN exprseq . ;
    (29) exprseq -> exprseq . , expr
    ;               shift and go to state 89
    ,               shift and go to state 90


state 55

    (30) exprseq -> expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ;               reduce using rule 30 (exprseq -> expr .)
    ,               reduce using rule 30 (exprseq -> expr .)
    ]               reduce using rule 30 (exprseq -> expr .)
    {               reduce using rule 30 (exprseq -> expr .)
    FOR             reduce using rule 30 (exprseq -> expr .)
    WHILE           reduce using rule 30 (exprseq -> expr .)
    IF              reduce using rule 30 (exprseq -> expr .)
    CONTINUE        reduce using rule 30 (exprseq -> expr .)
    BREAK           reduce using rule 30 (exprseq -> expr .)
    RETURN          reduce using rule 30 (exprseq -> expr .)
    PRINT           reduce using rule 30 (exprseq -> expr .)
    ZEROS           reduce using rule 30 (exprseq -> expr .)
    ONES            reduce using rule 30 (exprseq -> expr .)
    EYE             reduce using rule 30 (exprseq -> expr .)
    STRING          reduce using rule 30 (exprseq -> expr .)
    FLOATNUM        reduce using rule 30 (exprseq -> expr .)
    INTNUM          reduce using rule 30 (exprseq -> expr .)
    ID              reduce using rule 30 (exprseq -> expr .)
    (               reduce using rule 30 (exprseq -> expr .)
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 56

    (47) statement -> PRINT exprseq . ;
    (29) exprseq -> exprseq . , expr
    ;               shift and go to state 91
    ,               shift and go to state 90


state 57

    (31) array -> [ elements . ]
    (32) elements -> elements . , expr
    ]               shift and go to state 92
    ,               shift and go to state 93


state 58

    (33) elements -> expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    ]               reduce using rule 33 (elements -> expr .)
    ,               reduce using rule 33 (elements -> expr .)
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 59

    (4) expr -> ZEROS ( . expr )
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 94
    array                          shift and go to state 15

state 60

    (5) expr -> ONES ( . expr )
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 95
    array                          shift and go to state 15

state 61

    (6) expr -> EYE ( . expr )
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 96
    array                          shift and go to state 15

state 62

    (12) expr -> SUB expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 12 (expr -> SUB expr .)
    IMUL            reduce using rule 12 (expr -> SUB expr .)
    ISUB            reduce using rule 12 (expr -> SUB expr .)
    IADD            reduce using rule 12 (expr -> SUB expr .)
    =               reduce using rule 12 (expr -> SUB expr .)
    [               reduce using rule 12 (expr -> SUB expr .)
    '               reduce using rule 12 (expr -> SUB expr .)
    :               reduce using rule 12 (expr -> SUB expr .)
    LE              reduce using rule 12 (expr -> SUB expr .)
    LT              reduce using rule 12 (expr -> SUB expr .)
    GE              reduce using rule 12 (expr -> SUB expr .)
    GT              reduce using rule 12 (expr -> SUB expr .)
    NE              reduce using rule 12 (expr -> SUB expr .)
    EQ              reduce using rule 12 (expr -> SUB expr .)
    DDIV            reduce using rule 12 (expr -> SUB expr .)
    DMUL            reduce using rule 12 (expr -> SUB expr .)
    DSUB            reduce using rule 12 (expr -> SUB expr .)
    DADD            reduce using rule 12 (expr -> SUB expr .)
    DIV             reduce using rule 12 (expr -> SUB expr .)
    MUL             reduce using rule 12 (expr -> SUB expr .)
    SUB             reduce using rule 12 (expr -> SUB expr .)
    ADD             reduce using rule 12 (expr -> SUB expr .)
    )               reduce using rule 12 (expr -> SUB expr .)
    ;               reduce using rule 12 (expr -> SUB expr .)
    ,               reduce using rule 12 (expr -> SUB expr .)
    ]               reduce using rule 12 (expr -> SUB expr .)
    {               reduce using rule 12 (expr -> SUB expr .)
    FOR             reduce using rule 12 (expr -> SUB expr .)
    WHILE           reduce using rule 12 (expr -> SUB expr .)
    IF              reduce using rule 12 (expr -> SUB expr .)
    CONTINUE        reduce using rule 12 (expr -> SUB expr .)
    BREAK           reduce using rule 12 (expr -> SUB expr .)
    RETURN          reduce using rule 12 (expr -> SUB expr .)
    PRINT           reduce using rule 12 (expr -> SUB expr .)
    ZEROS           reduce using rule 12 (expr -> SUB expr .)
    ONES            reduce using rule 12 (expr -> SUB expr .)
    EYE             reduce using rule 12 (expr -> SUB expr .)
    STRING          reduce using rule 12 (expr -> SUB expr .)
    FLOATNUM        reduce using rule 12 (expr -> SUB expr .)
    INTNUM          reduce using rule 12 (expr -> SUB expr .)
    ID              reduce using rule 12 (expr -> SUB expr .)
    (               reduce using rule 12 (expr -> SUB expr .)


state 63

    (34) statement -> { statementseq } .
    {               reduce using rule 34 (statement -> { statementseq } .)
    FOR             reduce using rule 34 (statement -> { statementseq } .)
    WHILE           reduce using rule 34 (statement -> { statementseq } .)
    IF              reduce using rule 34 (statement -> { statementseq } .)
    CONTINUE        reduce using rule 34 (statement -> { statementseq } .)
    BREAK           reduce using rule 34 (statement -> { statementseq } .)
    RETURN          reduce using rule 34 (statement -> { statementseq } .)
    PRINT           reduce using rule 34 (statement -> { statementseq } .)
    ZEROS           reduce using rule 34 (statement -> { statementseq } .)
    ONES            reduce using rule 34 (statement -> { statementseq } .)
    EYE             reduce using rule 34 (statement -> { statementseq } .)
    STRING          reduce using rule 34 (statement -> { statementseq } .)
    FLOATNUM        reduce using rule 34 (statement -> { statementseq } .)
    INTNUM          reduce using rule 34 (statement -> { statementseq } .)
    ID              reduce using rule 34 (statement -> { statementseq } .)
    SUB             reduce using rule 34 (statement -> { statementseq } .)
    (               reduce using rule 34 (statement -> { statementseq } .)
    [               reduce using rule 34 (statement -> { statementseq } .)
    $end            reduce using rule 34 (statement -> { statementseq } .)
    }               reduce using rule 34 (statement -> { statementseq } .)
    ELSE            reduce using rule 34 (statement -> { statementseq } .)


state 64

    (35) statement -> FOR ID = . exprseq statement
    (29) exprseq -> . exprseq , expr
    (30) exprseq -> . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    exprseq                        shift and go to state 97
    expr                           shift and go to state 55
    array                          shift and go to state 15

state 65

    (36) statement -> WHILE ( expr . ) statement
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    )               shift and go to state 98
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 66

    (13) expr -> ( expr ) .
    IDIV            reduce using rule 13 (expr -> ( expr ) .)
    IMUL            reduce using rule 13 (expr -> ( expr ) .)
    ISUB            reduce using rule 13 (expr -> ( expr ) .)
    IADD            reduce using rule 13 (expr -> ( expr ) .)
    =               reduce using rule 13 (expr -> ( expr ) .)
    [               reduce using rule 13 (expr -> ( expr ) .)
    '               reduce using rule 13 (expr -> ( expr ) .)
    :               reduce using rule 13 (expr -> ( expr ) .)
    LE              reduce using rule 13 (expr -> ( expr ) .)
    LT              reduce using rule 13 (expr -> ( expr ) .)
    GE              reduce using rule 13 (expr -> ( expr ) .)
    GT              reduce using rule 13 (expr -> ( expr ) .)
    NE              reduce using rule 13 (expr -> ( expr ) .)
    EQ              reduce using rule 13 (expr -> ( expr ) .)
    DDIV            reduce using rule 13 (expr -> ( expr ) .)
    DMUL            reduce using rule 13 (expr -> ( expr ) .)
    DSUB            reduce using rule 13 (expr -> ( expr ) .)
    DADD            reduce using rule 13 (expr -> ( expr ) .)
    DIV             reduce using rule 13 (expr -> ( expr ) .)
    MUL             reduce using rule 13 (expr -> ( expr ) .)
    SUB             reduce using rule 13 (expr -> ( expr ) .)
    ADD             reduce using rule 13 (expr -> ( expr ) .)
    )               reduce using rule 13 (expr -> ( expr ) .)
    ;               reduce using rule 13 (expr -> ( expr ) .)
    ,               reduce using rule 13 (expr -> ( expr ) .)
    ]               reduce using rule 13 (expr -> ( expr ) .)
    {               reduce using rule 13 (expr -> ( expr ) .)
    FOR             reduce using rule 13 (expr -> ( expr ) .)
    WHILE           reduce using rule 13 (expr -> ( expr ) .)
    IF              reduce using rule 13 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 13 (expr -> ( expr ) .)
    BREAK           reduce using rule 13 (expr -> ( expr ) .)
    RETURN          reduce using rule 13 (expr -> ( expr ) .)
    PRINT           reduce using rule 13 (expr -> ( expr ) .)
    ZEROS           reduce using rule 13 (expr -> ( expr ) .)
    ONES            reduce using rule 13 (expr -> ( expr ) .)
    EYE             reduce using rule 13 (expr -> ( expr ) .)
    STRING          reduce using rule 13 (expr -> ( expr ) .)
    FLOATNUM        reduce using rule 13 (expr -> ( expr ) .)
    INTNUM          reduce using rule 13 (expr -> ( expr ) .)
    ID              reduce using rule 13 (expr -> ( expr ) .)
    (               reduce using rule 13 (expr -> ( expr ) .)


state 67

    (39) statement -> expr IDIV expr . ;
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    ;               shift and go to state 99
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 68

    (40) statement -> expr IMUL expr . ;
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    ;               shift and go to state 100
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 69

    (41) statement -> expr ISUB expr . ;
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    ;               shift and go to state 101
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 70

    (42) statement -> expr IADD expr . ;
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    ;               shift and go to state 102
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 71

    (43) statement -> expr = expr . ;
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    ;               shift and go to state 103
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 72

    (3) expr -> expr [ exprseq . ]
    (29) exprseq -> exprseq . , expr
    ]               shift and go to state 104
    ,               shift and go to state 90


state 73

    (14) expr -> expr : expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 14 (expr -> expr : expr .)
    IMUL            reduce using rule 14 (expr -> expr : expr .)
    ISUB            reduce using rule 14 (expr -> expr : expr .)
    IADD            reduce using rule 14 (expr -> expr : expr .)
    =               reduce using rule 14 (expr -> expr : expr .)
    [               reduce using rule 14 (expr -> expr : expr .)
    '               reduce using rule 14 (expr -> expr : expr .)
    :               reduce using rule 14 (expr -> expr : expr .)
    )               reduce using rule 14 (expr -> expr : expr .)
    ;               reduce using rule 14 (expr -> expr : expr .)
    ,               reduce using rule 14 (expr -> expr : expr .)
    ]               reduce using rule 14 (expr -> expr : expr .)
    {               reduce using rule 14 (expr -> expr : expr .)
    FOR             reduce using rule 14 (expr -> expr : expr .)
    WHILE           reduce using rule 14 (expr -> expr : expr .)
    IF              reduce using rule 14 (expr -> expr : expr .)
    CONTINUE        reduce using rule 14 (expr -> expr : expr .)
    BREAK           reduce using rule 14 (expr -> expr : expr .)
    RETURN          reduce using rule 14 (expr -> expr : expr .)
    PRINT           reduce using rule 14 (expr -> expr : expr .)
    ZEROS           reduce using rule 14 (expr -> expr : expr .)
    ONES            reduce using rule 14 (expr -> expr : expr .)
    EYE             reduce using rule 14 (expr -> expr : expr .)
    STRING          reduce using rule 14 (expr -> expr : expr .)
    FLOATNUM        reduce using rule 14 (expr -> expr : expr .)
    INTNUM          reduce using rule 14 (expr -> expr : expr .)
    ID              reduce using rule 14 (expr -> expr : expr .)
    (               reduce using rule 14 (expr -> expr : expr .)
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 74

    (15) expr -> expr LE expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 15 (expr -> expr LE expr .)
    IMUL            reduce using rule 15 (expr -> expr LE expr .)
    ISUB            reduce using rule 15 (expr -> expr LE expr .)
    IADD            reduce using rule 15 (expr -> expr LE expr .)
    =               reduce using rule 15 (expr -> expr LE expr .)
    [               reduce using rule 15 (expr -> expr LE expr .)
    '               reduce using rule 15 (expr -> expr LE expr .)
    :               reduce using rule 15 (expr -> expr LE expr .)
    LE              reduce using rule 15 (expr -> expr LE expr .)
    LT              reduce using rule 15 (expr -> expr LE expr .)
    GE              reduce using rule 15 (expr -> expr LE expr .)
    GT              reduce using rule 15 (expr -> expr LE expr .)
    NE              reduce using rule 15 (expr -> expr LE expr .)
    EQ              reduce using rule 15 (expr -> expr LE expr .)
    )               reduce using rule 15 (expr -> expr LE expr .)
    ;               reduce using rule 15 (expr -> expr LE expr .)
    ,               reduce using rule 15 (expr -> expr LE expr .)
    ]               reduce using rule 15 (expr -> expr LE expr .)
    {               reduce using rule 15 (expr -> expr LE expr .)
    FOR             reduce using rule 15 (expr -> expr LE expr .)
    WHILE           reduce using rule 15 (expr -> expr LE expr .)
    IF              reduce using rule 15 (expr -> expr LE expr .)
    CONTINUE        reduce using rule 15 (expr -> expr LE expr .)
    BREAK           reduce using rule 15 (expr -> expr LE expr .)
    RETURN          reduce using rule 15 (expr -> expr LE expr .)
    PRINT           reduce using rule 15 (expr -> expr LE expr .)
    ZEROS           reduce using rule 15 (expr -> expr LE expr .)
    ONES            reduce using rule 15 (expr -> expr LE expr .)
    EYE             reduce using rule 15 (expr -> expr LE expr .)
    STRING          reduce using rule 15 (expr -> expr LE expr .)
    FLOATNUM        reduce using rule 15 (expr -> expr LE expr .)
    INTNUM          reduce using rule 15 (expr -> expr LE expr .)
    ID              reduce using rule 15 (expr -> expr LE expr .)
    (               reduce using rule 15 (expr -> expr LE expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 75

    (16) expr -> expr LT expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 16 (expr -> expr LT expr .)
    IMUL            reduce using rule 16 (expr -> expr LT expr .)
    ISUB            reduce using rule 16 (expr -> expr LT expr .)
    IADD            reduce using rule 16 (expr -> expr LT expr .)
    =               reduce using rule 16 (expr -> expr LT expr .)
    [               reduce using rule 16 (expr -> expr LT expr .)
    '               reduce using rule 16 (expr -> expr LT expr .)
    :               reduce using rule 16 (expr -> expr LT expr .)
    LE              reduce using rule 16 (expr -> expr LT expr .)
    LT              reduce using rule 16 (expr -> expr LT expr .)
    GE              reduce using rule 16 (expr -> expr LT expr .)
    GT              reduce using rule 16 (expr -> expr LT expr .)
    NE              reduce using rule 16 (expr -> expr LT expr .)
    EQ              reduce using rule 16 (expr -> expr LT expr .)
    )               reduce using rule 16 (expr -> expr LT expr .)
    ;               reduce using rule 16 (expr -> expr LT expr .)
    ,               reduce using rule 16 (expr -> expr LT expr .)
    ]               reduce using rule 16 (expr -> expr LT expr .)
    {               reduce using rule 16 (expr -> expr LT expr .)
    FOR             reduce using rule 16 (expr -> expr LT expr .)
    WHILE           reduce using rule 16 (expr -> expr LT expr .)
    IF              reduce using rule 16 (expr -> expr LT expr .)
    CONTINUE        reduce using rule 16 (expr -> expr LT expr .)
    BREAK           reduce using rule 16 (expr -> expr LT expr .)
    RETURN          reduce using rule 16 (expr -> expr LT expr .)
    PRINT           reduce using rule 16 (expr -> expr LT expr .)
    ZEROS           reduce using rule 16 (expr -> expr LT expr .)
    ONES            reduce using rule 16 (expr -> expr LT expr .)
    EYE             reduce using rule 16 (expr -> expr LT expr .)
    STRING          reduce using rule 16 (expr -> expr LT expr .)
    FLOATNUM        reduce using rule 16 (expr -> expr LT expr .)
    INTNUM          reduce using rule 16 (expr -> expr LT expr .)
    ID              reduce using rule 16 (expr -> expr LT expr .)
    (               reduce using rule 16 (expr -> expr LT expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 76

    (17) expr -> expr GE expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 17 (expr -> expr GE expr .)
    IMUL            reduce using rule 17 (expr -> expr GE expr .)
    ISUB            reduce using rule 17 (expr -> expr GE expr .)
    IADD            reduce using rule 17 (expr -> expr GE expr .)
    =               reduce using rule 17 (expr -> expr GE expr .)
    [               reduce using rule 17 (expr -> expr GE expr .)
    '               reduce using rule 17 (expr -> expr GE expr .)
    :               reduce using rule 17 (expr -> expr GE expr .)
    LE              reduce using rule 17 (expr -> expr GE expr .)
    LT              reduce using rule 17 (expr -> expr GE expr .)
    GE              reduce using rule 17 (expr -> expr GE expr .)
    GT              reduce using rule 17 (expr -> expr GE expr .)
    NE              reduce using rule 17 (expr -> expr GE expr .)
    EQ              reduce using rule 17 (expr -> expr GE expr .)
    )               reduce using rule 17 (expr -> expr GE expr .)
    ;               reduce using rule 17 (expr -> expr GE expr .)
    ,               reduce using rule 17 (expr -> expr GE expr .)
    ]               reduce using rule 17 (expr -> expr GE expr .)
    {               reduce using rule 17 (expr -> expr GE expr .)
    FOR             reduce using rule 17 (expr -> expr GE expr .)
    WHILE           reduce using rule 17 (expr -> expr GE expr .)
    IF              reduce using rule 17 (expr -> expr GE expr .)
    CONTINUE        reduce using rule 17 (expr -> expr GE expr .)
    BREAK           reduce using rule 17 (expr -> expr GE expr .)
    RETURN          reduce using rule 17 (expr -> expr GE expr .)
    PRINT           reduce using rule 17 (expr -> expr GE expr .)
    ZEROS           reduce using rule 17 (expr -> expr GE expr .)
    ONES            reduce using rule 17 (expr -> expr GE expr .)
    EYE             reduce using rule 17 (expr -> expr GE expr .)
    STRING          reduce using rule 17 (expr -> expr GE expr .)
    FLOATNUM        reduce using rule 17 (expr -> expr GE expr .)
    INTNUM          reduce using rule 17 (expr -> expr GE expr .)
    ID              reduce using rule 17 (expr -> expr GE expr .)
    (               reduce using rule 17 (expr -> expr GE expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 77

    (18) expr -> expr GT expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 18 (expr -> expr GT expr .)
    IMUL            reduce using rule 18 (expr -> expr GT expr .)
    ISUB            reduce using rule 18 (expr -> expr GT expr .)
    IADD            reduce using rule 18 (expr -> expr GT expr .)
    =               reduce using rule 18 (expr -> expr GT expr .)
    [               reduce using rule 18 (expr -> expr GT expr .)
    '               reduce using rule 18 (expr -> expr GT expr .)
    :               reduce using rule 18 (expr -> expr GT expr .)
    LE              reduce using rule 18 (expr -> expr GT expr .)
    LT              reduce using rule 18 (expr -> expr GT expr .)
    GE              reduce using rule 18 (expr -> expr GT expr .)
    GT              reduce using rule 18 (expr -> expr GT expr .)
    NE              reduce using rule 18 (expr -> expr GT expr .)
    EQ              reduce using rule 18 (expr -> expr GT expr .)
    )               reduce using rule 18 (expr -> expr GT expr .)
    ;               reduce using rule 18 (expr -> expr GT expr .)
    ,               reduce using rule 18 (expr -> expr GT expr .)
    ]               reduce using rule 18 (expr -> expr GT expr .)
    {               reduce using rule 18 (expr -> expr GT expr .)
    FOR             reduce using rule 18 (expr -> expr GT expr .)
    WHILE           reduce using rule 18 (expr -> expr GT expr .)
    IF              reduce using rule 18 (expr -> expr GT expr .)
    CONTINUE        reduce using rule 18 (expr -> expr GT expr .)
    BREAK           reduce using rule 18 (expr -> expr GT expr .)
    RETURN          reduce using rule 18 (expr -> expr GT expr .)
    PRINT           reduce using rule 18 (expr -> expr GT expr .)
    ZEROS           reduce using rule 18 (expr -> expr GT expr .)
    ONES            reduce using rule 18 (expr -> expr GT expr .)
    EYE             reduce using rule 18 (expr -> expr GT expr .)
    STRING          reduce using rule 18 (expr -> expr GT expr .)
    FLOATNUM        reduce using rule 18 (expr -> expr GT expr .)
    INTNUM          reduce using rule 18 (expr -> expr GT expr .)
    ID              reduce using rule 18 (expr -> expr GT expr .)
    (               reduce using rule 18 (expr -> expr GT expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 78

    (19) expr -> expr NE expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 19 (expr -> expr NE expr .)
    IMUL            reduce using rule 19 (expr -> expr NE expr .)
    ISUB            reduce using rule 19 (expr -> expr NE expr .)
    IADD            reduce using rule 19 (expr -> expr NE expr .)
    =               reduce using rule 19 (expr -> expr NE expr .)
    [               reduce using rule 19 (expr -> expr NE expr .)
    '               reduce using rule 19 (expr -> expr NE expr .)
    :               reduce using rule 19 (expr -> expr NE expr .)
    LE              reduce using rule 19 (expr -> expr NE expr .)
    LT              reduce using rule 19 (expr -> expr NE expr .)
    GE              reduce using rule 19 (expr -> expr NE expr .)
    GT              reduce using rule 19 (expr -> expr NE expr .)
    NE              reduce using rule 19 (expr -> expr NE expr .)
    EQ              reduce using rule 19 (expr -> expr NE expr .)
    )               reduce using rule 19 (expr -> expr NE expr .)
    ;               reduce using rule 19 (expr -> expr NE expr .)
    ,               reduce using rule 19 (expr -> expr NE expr .)
    ]               reduce using rule 19 (expr -> expr NE expr .)
    {               reduce using rule 19 (expr -> expr NE expr .)
    FOR             reduce using rule 19 (expr -> expr NE expr .)
    WHILE           reduce using rule 19 (expr -> expr NE expr .)
    IF              reduce using rule 19 (expr -> expr NE expr .)
    CONTINUE        reduce using rule 19 (expr -> expr NE expr .)
    BREAK           reduce using rule 19 (expr -> expr NE expr .)
    RETURN          reduce using rule 19 (expr -> expr NE expr .)
    PRINT           reduce using rule 19 (expr -> expr NE expr .)
    ZEROS           reduce using rule 19 (expr -> expr NE expr .)
    ONES            reduce using rule 19 (expr -> expr NE expr .)
    EYE             reduce using rule 19 (expr -> expr NE expr .)
    STRING          reduce using rule 19 (expr -> expr NE expr .)
    FLOATNUM        reduce using rule 19 (expr -> expr NE expr .)
    INTNUM          reduce using rule 19 (expr -> expr NE expr .)
    ID              reduce using rule 19 (expr -> expr NE expr .)
    (               reduce using rule 19 (expr -> expr NE expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 79

    (20) expr -> expr EQ expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 20 (expr -> expr EQ expr .)
    IMUL            reduce using rule 20 (expr -> expr EQ expr .)
    ISUB            reduce using rule 20 (expr -> expr EQ expr .)
    IADD            reduce using rule 20 (expr -> expr EQ expr .)
    =               reduce using rule 20 (expr -> expr EQ expr .)
    [               reduce using rule 20 (expr -> expr EQ expr .)
    '               reduce using rule 20 (expr -> expr EQ expr .)
    :               reduce using rule 20 (expr -> expr EQ expr .)
    LE              reduce using rule 20 (expr -> expr EQ expr .)
    LT              reduce using rule 20 (expr -> expr EQ expr .)
    GE              reduce using rule 20 (expr -> expr EQ expr .)
    GT              reduce using rule 20 (expr -> expr EQ expr .)
    NE              reduce using rule 20 (expr -> expr EQ expr .)
    EQ              reduce using rule 20 (expr -> expr EQ expr .)
    )               reduce using rule 20 (expr -> expr EQ expr .)
    ;               reduce using rule 20 (expr -> expr EQ expr .)
    ,               reduce using rule 20 (expr -> expr EQ expr .)
    ]               reduce using rule 20 (expr -> expr EQ expr .)
    {               reduce using rule 20 (expr -> expr EQ expr .)
    FOR             reduce using rule 20 (expr -> expr EQ expr .)
    WHILE           reduce using rule 20 (expr -> expr EQ expr .)
    IF              reduce using rule 20 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 20 (expr -> expr EQ expr .)
    BREAK           reduce using rule 20 (expr -> expr EQ expr .)
    RETURN          reduce using rule 20 (expr -> expr EQ expr .)
    PRINT           reduce using rule 20 (expr -> expr EQ expr .)
    ZEROS           reduce using rule 20 (expr -> expr EQ expr .)
    ONES            reduce using rule 20 (expr -> expr EQ expr .)
    EYE             reduce using rule 20 (expr -> expr EQ expr .)
    STRING          reduce using rule 20 (expr -> expr EQ expr .)
    FLOATNUM        reduce using rule 20 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 20 (expr -> expr EQ expr .)
    ID              reduce using rule 20 (expr -> expr EQ expr .)
    (               reduce using rule 20 (expr -> expr EQ expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 80

    (21) expr -> expr DDIV expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 21 (expr -> expr DDIV expr .)
    IMUL            reduce using rule 21 (expr -> expr DDIV expr .)
    ISUB            reduce using rule 21 (expr -> expr DDIV expr .)
    IADD            reduce using rule 21 (expr -> expr DDIV expr .)
    =               reduce using rule 21 (expr -> expr DDIV expr .)
    [               reduce using rule 21 (expr -> expr DDIV expr .)
    '               reduce using rule 21 (expr -> expr DDIV expr .)
    :               reduce using rule 21 (expr -> expr DDIV expr .)
    LE              reduce using rule 21 (expr -> expr DDIV expr .)
    LT              reduce using rule 21 (expr -> expr DDIV expr .)
    GE              reduce using rule 21 (expr -> expr DDIV expr .)
    GT              reduce using rule 21 (expr -> expr DDIV expr .)
    NE              reduce using rule 21 (expr -> expr DDIV expr .)
    EQ              reduce using rule 21 (expr -> expr DDIV expr .)
    DDIV            reduce using rule 21 (expr -> expr DDIV expr .)
    DMUL            reduce using rule 21 (expr -> expr DDIV expr .)
    DSUB            reduce using rule 21 (expr -> expr DDIV expr .)
    DADD            reduce using rule 21 (expr -> expr DDIV expr .)
    DIV             reduce using rule 21 (expr -> expr DDIV expr .)
    MUL             reduce using rule 21 (expr -> expr DDIV expr .)
    SUB             reduce using rule 21 (expr -> expr DDIV expr .)
    ADD             reduce using rule 21 (expr -> expr DDIV expr .)
    )               reduce using rule 21 (expr -> expr DDIV expr .)
    ;               reduce using rule 21 (expr -> expr DDIV expr .)
    ,               reduce using rule 21 (expr -> expr DDIV expr .)
    ]               reduce using rule 21 (expr -> expr DDIV expr .)
    {               reduce using rule 21 (expr -> expr DDIV expr .)
    FOR             reduce using rule 21 (expr -> expr DDIV expr .)
    WHILE           reduce using rule 21 (expr -> expr DDIV expr .)
    IF              reduce using rule 21 (expr -> expr DDIV expr .)
    CONTINUE        reduce using rule 21 (expr -> expr DDIV expr .)
    BREAK           reduce using rule 21 (expr -> expr DDIV expr .)
    RETURN          reduce using rule 21 (expr -> expr DDIV expr .)
    PRINT           reduce using rule 21 (expr -> expr DDIV expr .)
    ZEROS           reduce using rule 21 (expr -> expr DDIV expr .)
    ONES            reduce using rule 21 (expr -> expr DDIV expr .)
    EYE             reduce using rule 21 (expr -> expr DDIV expr .)
    STRING          reduce using rule 21 (expr -> expr DDIV expr .)
    FLOATNUM        reduce using rule 21 (expr -> expr DDIV expr .)
    INTNUM          reduce using rule 21 (expr -> expr DDIV expr .)
    ID              reduce using rule 21 (expr -> expr DDIV expr .)
    (               reduce using rule 21 (expr -> expr DDIV expr .)


state 81

    (22) expr -> expr DMUL expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 22 (expr -> expr DMUL expr .)
    IMUL            reduce using rule 22 (expr -> expr DMUL expr .)
    ISUB            reduce using rule 22 (expr -> expr DMUL expr .)
    IADD            reduce using rule 22 (expr -> expr DMUL expr .)
    =               reduce using rule 22 (expr -> expr DMUL expr .)
    [               reduce using rule 22 (expr -> expr DMUL expr .)
    '               reduce using rule 22 (expr -> expr DMUL expr .)
    :               reduce using rule 22 (expr -> expr DMUL expr .)
    LE              reduce using rule 22 (expr -> expr DMUL expr .)
    LT              reduce using rule 22 (expr -> expr DMUL expr .)
    GE              reduce using rule 22 (expr -> expr DMUL expr .)
    GT              reduce using rule 22 (expr -> expr DMUL expr .)
    NE              reduce using rule 22 (expr -> expr DMUL expr .)
    EQ              reduce using rule 22 (expr -> expr DMUL expr .)
    DDIV            reduce using rule 22 (expr -> expr DMUL expr .)
    DMUL            reduce using rule 22 (expr -> expr DMUL expr .)
    DSUB            reduce using rule 22 (expr -> expr DMUL expr .)
    DADD            reduce using rule 22 (expr -> expr DMUL expr .)
    DIV             reduce using rule 22 (expr -> expr DMUL expr .)
    MUL             reduce using rule 22 (expr -> expr DMUL expr .)
    SUB             reduce using rule 22 (expr -> expr DMUL expr .)
    ADD             reduce using rule 22 (expr -> expr DMUL expr .)
    )               reduce using rule 22 (expr -> expr DMUL expr .)
    ;               reduce using rule 22 (expr -> expr DMUL expr .)
    ,               reduce using rule 22 (expr -> expr DMUL expr .)
    ]               reduce using rule 22 (expr -> expr DMUL expr .)
    {               reduce using rule 22 (expr -> expr DMUL expr .)
    FOR             reduce using rule 22 (expr -> expr DMUL expr .)
    WHILE           reduce using rule 22 (expr -> expr DMUL expr .)
    IF              reduce using rule 22 (expr -> expr DMUL expr .)
    CONTINUE        reduce using rule 22 (expr -> expr DMUL expr .)
    BREAK           reduce using rule 22 (expr -> expr DMUL expr .)
    RETURN          reduce using rule 22 (expr -> expr DMUL expr .)
    PRINT           reduce using rule 22 (expr -> expr DMUL expr .)
    ZEROS           reduce using rule 22 (expr -> expr DMUL expr .)
    ONES            reduce using rule 22 (expr -> expr DMUL expr .)
    EYE             reduce using rule 22 (expr -> expr DMUL expr .)
    STRING          reduce using rule 22 (expr -> expr DMUL expr .)
    FLOATNUM        reduce using rule 22 (expr -> expr DMUL expr .)
    INTNUM          reduce using rule 22 (expr -> expr DMUL expr .)
    ID              reduce using rule 22 (expr -> expr DMUL expr .)
    (               reduce using rule 22 (expr -> expr DMUL expr .)


state 82

    (23) expr -> expr DSUB expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 23 (expr -> expr DSUB expr .)
    IMUL            reduce using rule 23 (expr -> expr DSUB expr .)
    ISUB            reduce using rule 23 (expr -> expr DSUB expr .)
    IADD            reduce using rule 23 (expr -> expr DSUB expr .)
    =               reduce using rule 23 (expr -> expr DSUB expr .)
    [               reduce using rule 23 (expr -> expr DSUB expr .)
    '               reduce using rule 23 (expr -> expr DSUB expr .)
    :               reduce using rule 23 (expr -> expr DSUB expr .)
    LE              reduce using rule 23 (expr -> expr DSUB expr .)
    LT              reduce using rule 23 (expr -> expr DSUB expr .)
    GE              reduce using rule 23 (expr -> expr DSUB expr .)
    GT              reduce using rule 23 (expr -> expr DSUB expr .)
    NE              reduce using rule 23 (expr -> expr DSUB expr .)
    EQ              reduce using rule 23 (expr -> expr DSUB expr .)
    DSUB            reduce using rule 23 (expr -> expr DSUB expr .)
    DADD            reduce using rule 23 (expr -> expr DSUB expr .)
    SUB             reduce using rule 23 (expr -> expr DSUB expr .)
    ADD             reduce using rule 23 (expr -> expr DSUB expr .)
    )               reduce using rule 23 (expr -> expr DSUB expr .)
    ;               reduce using rule 23 (expr -> expr DSUB expr .)
    ,               reduce using rule 23 (expr -> expr DSUB expr .)
    ]               reduce using rule 23 (expr -> expr DSUB expr .)
    {               reduce using rule 23 (expr -> expr DSUB expr .)
    FOR             reduce using rule 23 (expr -> expr DSUB expr .)
    WHILE           reduce using rule 23 (expr -> expr DSUB expr .)
    IF              reduce using rule 23 (expr -> expr DSUB expr .)
    CONTINUE        reduce using rule 23 (expr -> expr DSUB expr .)
    BREAK           reduce using rule 23 (expr -> expr DSUB expr .)
    RETURN          reduce using rule 23 (expr -> expr DSUB expr .)
    PRINT           reduce using rule 23 (expr -> expr DSUB expr .)
    ZEROS           reduce using rule 23 (expr -> expr DSUB expr .)
    ONES            reduce using rule 23 (expr -> expr DSUB expr .)
    EYE             reduce using rule 23 (expr -> expr DSUB expr .)
    STRING          reduce using rule 23 (expr -> expr DSUB expr .)
    FLOATNUM        reduce using rule 23 (expr -> expr DSUB expr .)
    INTNUM          reduce using rule 23 (expr -> expr DSUB expr .)
    ID              reduce using rule 23 (expr -> expr DSUB expr .)
    (               reduce using rule 23 (expr -> expr DSUB expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DIV             shift and go to state 47
    MUL             shift and go to state 48


state 83

    (24) expr -> expr DADD expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 24 (expr -> expr DADD expr .)
    IMUL            reduce using rule 24 (expr -> expr DADD expr .)
    ISUB            reduce using rule 24 (expr -> expr DADD expr .)
    IADD            reduce using rule 24 (expr -> expr DADD expr .)
    =               reduce using rule 24 (expr -> expr DADD expr .)
    [               reduce using rule 24 (expr -> expr DADD expr .)
    '               reduce using rule 24 (expr -> expr DADD expr .)
    :               reduce using rule 24 (expr -> expr DADD expr .)
    LE              reduce using rule 24 (expr -> expr DADD expr .)
    LT              reduce using rule 24 (expr -> expr DADD expr .)
    GE              reduce using rule 24 (expr -> expr DADD expr .)
    GT              reduce using rule 24 (expr -> expr DADD expr .)
    NE              reduce using rule 24 (expr -> expr DADD expr .)
    EQ              reduce using rule 24 (expr -> expr DADD expr .)
    DSUB            reduce using rule 24 (expr -> expr DADD expr .)
    DADD            reduce using rule 24 (expr -> expr DADD expr .)
    SUB             reduce using rule 24 (expr -> expr DADD expr .)
    ADD             reduce using rule 24 (expr -> expr DADD expr .)
    )               reduce using rule 24 (expr -> expr DADD expr .)
    ;               reduce using rule 24 (expr -> expr DADD expr .)
    ,               reduce using rule 24 (expr -> expr DADD expr .)
    ]               reduce using rule 24 (expr -> expr DADD expr .)
    {               reduce using rule 24 (expr -> expr DADD expr .)
    FOR             reduce using rule 24 (expr -> expr DADD expr .)
    WHILE           reduce using rule 24 (expr -> expr DADD expr .)
    IF              reduce using rule 24 (expr -> expr DADD expr .)
    CONTINUE        reduce using rule 24 (expr -> expr DADD expr .)
    BREAK           reduce using rule 24 (expr -> expr DADD expr .)
    RETURN          reduce using rule 24 (expr -> expr DADD expr .)
    PRINT           reduce using rule 24 (expr -> expr DADD expr .)
    ZEROS           reduce using rule 24 (expr -> expr DADD expr .)
    ONES            reduce using rule 24 (expr -> expr DADD expr .)
    EYE             reduce using rule 24 (expr -> expr DADD expr .)
    STRING          reduce using rule 24 (expr -> expr DADD expr .)
    FLOATNUM        reduce using rule 24 (expr -> expr DADD expr .)
    INTNUM          reduce using rule 24 (expr -> expr DADD expr .)
    ID              reduce using rule 24 (expr -> expr DADD expr .)
    (               reduce using rule 24 (expr -> expr DADD expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DIV             shift and go to state 47
    MUL             shift and go to state 48


state 84

    (25) expr -> expr DIV expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 25 (expr -> expr DIV expr .)
    IMUL            reduce using rule 25 (expr -> expr DIV expr .)
    ISUB            reduce using rule 25 (expr -> expr DIV expr .)
    IADD            reduce using rule 25 (expr -> expr DIV expr .)
    =               reduce using rule 25 (expr -> expr DIV expr .)
    [               reduce using rule 25 (expr -> expr DIV expr .)
    '               reduce using rule 25 (expr -> expr DIV expr .)
    :               reduce using rule 25 (expr -> expr DIV expr .)
    LE              reduce using rule 25 (expr -> expr DIV expr .)
    LT              reduce using rule 25 (expr -> expr DIV expr .)
    GE              reduce using rule 25 (expr -> expr DIV expr .)
    GT              reduce using rule 25 (expr -> expr DIV expr .)
    NE              reduce using rule 25 (expr -> expr DIV expr .)
    EQ              reduce using rule 25 (expr -> expr DIV expr .)
    DDIV            reduce using rule 25 (expr -> expr DIV expr .)
    DMUL            reduce using rule 25 (expr -> expr DIV expr .)
    DSUB            reduce using rule 25 (expr -> expr DIV expr .)
    DADD            reduce using rule 25 (expr -> expr DIV expr .)
    DIV             reduce using rule 25 (expr -> expr DIV expr .)
    MUL             reduce using rule 25 (expr -> expr DIV expr .)
    SUB             reduce using rule 25 (expr -> expr DIV expr .)
    ADD             reduce using rule 25 (expr -> expr DIV expr .)
    )               reduce using rule 25 (expr -> expr DIV expr .)
    ;               reduce using rule 25 (expr -> expr DIV expr .)
    ,               reduce using rule 25 (expr -> expr DIV expr .)
    ]               reduce using rule 25 (expr -> expr DIV expr .)
    {               reduce using rule 25 (expr -> expr DIV expr .)
    FOR             reduce using rule 25 (expr -> expr DIV expr .)
    WHILE           reduce using rule 25 (expr -> expr DIV expr .)
    IF              reduce using rule 25 (expr -> expr DIV expr .)
    CONTINUE        reduce using rule 25 (expr -> expr DIV expr .)
    BREAK           reduce using rule 25 (expr -> expr DIV expr .)
    RETURN          reduce using rule 25 (expr -> expr DIV expr .)
    PRINT           reduce using rule 25 (expr -> expr DIV expr .)
    ZEROS           reduce using rule 25 (expr -> expr DIV expr .)
    ONES            reduce using rule 25 (expr -> expr DIV expr .)
    EYE             reduce using rule 25 (expr -> expr DIV expr .)
    STRING          reduce using rule 25 (expr -> expr DIV expr .)
    FLOATNUM        reduce using rule 25 (expr -> expr DIV expr .)
    INTNUM          reduce using rule 25 (expr -> expr DIV expr .)
    ID              reduce using rule 25 (expr -> expr DIV expr .)
    (               reduce using rule 25 (expr -> expr DIV expr .)


state 85

    (26) expr -> expr MUL expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 26 (expr -> expr MUL expr .)
    IMUL            reduce using rule 26 (expr -> expr MUL expr .)
    ISUB            reduce using rule 26 (expr -> expr MUL expr .)
    IADD            reduce using rule 26 (expr -> expr MUL expr .)
    =               reduce using rule 26 (expr -> expr MUL expr .)
    [               reduce using rule 26 (expr -> expr MUL expr .)
    '               reduce using rule 26 (expr -> expr MUL expr .)
    :               reduce using rule 26 (expr -> expr MUL expr .)
    LE              reduce using rule 26 (expr -> expr MUL expr .)
    LT              reduce using rule 26 (expr -> expr MUL expr .)
    GE              reduce using rule 26 (expr -> expr MUL expr .)
    GT              reduce using rule 26 (expr -> expr MUL expr .)
    NE              reduce using rule 26 (expr -> expr MUL expr .)
    EQ              reduce using rule 26 (expr -> expr MUL expr .)
    DDIV            reduce using rule 26 (expr -> expr MUL expr .)
    DMUL            reduce using rule 26 (expr -> expr MUL expr .)
    DSUB            reduce using rule 26 (expr -> expr MUL expr .)
    DADD            reduce using rule 26 (expr -> expr MUL expr .)
    DIV             reduce using rule 26 (expr -> expr MUL expr .)
    MUL             reduce using rule 26 (expr -> expr MUL expr .)
    SUB             reduce using rule 26 (expr -> expr MUL expr .)
    ADD             reduce using rule 26 (expr -> expr MUL expr .)
    )               reduce using rule 26 (expr -> expr MUL expr .)
    ;               reduce using rule 26 (expr -> expr MUL expr .)
    ,               reduce using rule 26 (expr -> expr MUL expr .)
    ]               reduce using rule 26 (expr -> expr MUL expr .)
    {               reduce using rule 26 (expr -> expr MUL expr .)
    FOR             reduce using rule 26 (expr -> expr MUL expr .)
    WHILE           reduce using rule 26 (expr -> expr MUL expr .)
    IF              reduce using rule 26 (expr -> expr MUL expr .)
    CONTINUE        reduce using rule 26 (expr -> expr MUL expr .)
    BREAK           reduce using rule 26 (expr -> expr MUL expr .)
    RETURN          reduce using rule 26 (expr -> expr MUL expr .)
    PRINT           reduce using rule 26 (expr -> expr MUL expr .)
    ZEROS           reduce using rule 26 (expr -> expr MUL expr .)
    ONES            reduce using rule 26 (expr -> expr MUL expr .)
    EYE             reduce using rule 26 (expr -> expr MUL expr .)
    STRING          reduce using rule 26 (expr -> expr MUL expr .)
    FLOATNUM        reduce using rule 26 (expr -> expr MUL expr .)
    INTNUM          reduce using rule 26 (expr -> expr MUL expr .)
    ID              reduce using rule 26 (expr -> expr MUL expr .)
    (               reduce using rule 26 (expr -> expr MUL expr .)


state 86

    (27) expr -> expr SUB expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 27 (expr -> expr SUB expr .)
    IMUL            reduce using rule 27 (expr -> expr SUB expr .)
    ISUB            reduce using rule 27 (expr -> expr SUB expr .)
    IADD            reduce using rule 27 (expr -> expr SUB expr .)
    =               reduce using rule 27 (expr -> expr SUB expr .)
    [               reduce using rule 27 (expr -> expr SUB expr .)
    '               reduce using rule 27 (expr -> expr SUB expr .)
    :               reduce using rule 27 (expr -> expr SUB expr .)
    LE              reduce using rule 27 (expr -> expr SUB expr .)
    LT              reduce using rule 27 (expr -> expr SUB expr .)
    GE              reduce using rule 27 (expr -> expr SUB expr .)
    GT              reduce using rule 27 (expr -> expr SUB expr .)
    NE              reduce using rule 27 (expr -> expr SUB expr .)
    EQ              reduce using rule 27 (expr -> expr SUB expr .)
    DSUB            reduce using rule 27 (expr -> expr SUB expr .)
    DADD            reduce using rule 27 (expr -> expr SUB expr .)
    SUB             reduce using rule 27 (expr -> expr SUB expr .)
    ADD             reduce using rule 27 (expr -> expr SUB expr .)
    )               reduce using rule 27 (expr -> expr SUB expr .)
    ;               reduce using rule 27 (expr -> expr SUB expr .)
    ,               reduce using rule 27 (expr -> expr SUB expr .)
    ]               reduce using rule 27 (expr -> expr SUB expr .)
    {               reduce using rule 27 (expr -> expr SUB expr .)
    FOR             reduce using rule 27 (expr -> expr SUB expr .)
    WHILE           reduce using rule 27 (expr -> expr SUB expr .)
    IF              reduce using rule 27 (expr -> expr SUB expr .)
    CONTINUE        reduce using rule 27 (expr -> expr SUB expr .)
    BREAK           reduce using rule 27 (expr -> expr SUB expr .)
    RETURN          reduce using rule 27 (expr -> expr SUB expr .)
    PRINT           reduce using rule 27 (expr -> expr SUB expr .)
    ZEROS           reduce using rule 27 (expr -> expr SUB expr .)
    ONES            reduce using rule 27 (expr -> expr SUB expr .)
    EYE             reduce using rule 27 (expr -> expr SUB expr .)
    STRING          reduce using rule 27 (expr -> expr SUB expr .)
    FLOATNUM        reduce using rule 27 (expr -> expr SUB expr .)
    INTNUM          reduce using rule 27 (expr -> expr SUB expr .)
    ID              reduce using rule 27 (expr -> expr SUB expr .)
    (               reduce using rule 27 (expr -> expr SUB expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DIV             shift and go to state 47
    MUL             shift and go to state 48


state 87

    (28) expr -> expr ADD expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    IDIV            reduce using rule 28 (expr -> expr ADD expr .)
    IMUL            reduce using rule 28 (expr -> expr ADD expr .)
    ISUB            reduce using rule 28 (expr -> expr ADD expr .)
    IADD            reduce using rule 28 (expr -> expr ADD expr .)
    =               reduce using rule 28 (expr -> expr ADD expr .)
    [               reduce using rule 28 (expr -> expr ADD expr .)
    '               reduce using rule 28 (expr -> expr ADD expr .)
    :               reduce using rule 28 (expr -> expr ADD expr .)
    LE              reduce using rule 28 (expr -> expr ADD expr .)
    LT              reduce using rule 28 (expr -> expr ADD expr .)
    GE              reduce using rule 28 (expr -> expr ADD expr .)
    GT              reduce using rule 28 (expr -> expr ADD expr .)
    NE              reduce using rule 28 (expr -> expr ADD expr .)
    EQ              reduce using rule 28 (expr -> expr ADD expr .)
    DSUB            reduce using rule 28 (expr -> expr ADD expr .)
    DADD            reduce using rule 28 (expr -> expr ADD expr .)
    SUB             reduce using rule 28 (expr -> expr ADD expr .)
    ADD             reduce using rule 28 (expr -> expr ADD expr .)
    )               reduce using rule 28 (expr -> expr ADD expr .)
    ;               reduce using rule 28 (expr -> expr ADD expr .)
    ,               reduce using rule 28 (expr -> expr ADD expr .)
    ]               reduce using rule 28 (expr -> expr ADD expr .)
    {               reduce using rule 28 (expr -> expr ADD expr .)
    FOR             reduce using rule 28 (expr -> expr ADD expr .)
    WHILE           reduce using rule 28 (expr -> expr ADD expr .)
    IF              reduce using rule 28 (expr -> expr ADD expr .)
    CONTINUE        reduce using rule 28 (expr -> expr ADD expr .)
    BREAK           reduce using rule 28 (expr -> expr ADD expr .)
    RETURN          reduce using rule 28 (expr -> expr ADD expr .)
    PRINT           reduce using rule 28 (expr -> expr ADD expr .)
    ZEROS           reduce using rule 28 (expr -> expr ADD expr .)
    ONES            reduce using rule 28 (expr -> expr ADD expr .)
    EYE             reduce using rule 28 (expr -> expr ADD expr .)
    STRING          reduce using rule 28 (expr -> expr ADD expr .)
    FLOATNUM        reduce using rule 28 (expr -> expr ADD expr .)
    INTNUM          reduce using rule 28 (expr -> expr ADD expr .)
    ID              reduce using rule 28 (expr -> expr ADD expr .)
    (               reduce using rule 28 (expr -> expr ADD expr .)
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DIV             shift and go to state 47
    MUL             shift and go to state 48


state 88

    (37) statement -> IF ( expr . ) statement ELSE statement
    (38) statement -> IF ( expr . ) statement
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    )               shift and go to state 105
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 89

    (46) statement -> RETURN exprseq ; .
    {               reduce using rule 46 (statement -> RETURN exprseq ; .)
    FOR             reduce using rule 46 (statement -> RETURN exprseq ; .)
    WHILE           reduce using rule 46 (statement -> RETURN exprseq ; .)
    IF              reduce using rule 46 (statement -> RETURN exprseq ; .)
    CONTINUE        reduce using rule 46 (statement -> RETURN exprseq ; .)
    BREAK           reduce using rule 46 (statement -> RETURN exprseq ; .)
    RETURN          reduce using rule 46 (statement -> RETURN exprseq ; .)
    PRINT           reduce using rule 46 (statement -> RETURN exprseq ; .)
    ZEROS           reduce using rule 46 (statement -> RETURN exprseq ; .)
    ONES            reduce using rule 46 (statement -> RETURN exprseq ; .)
    EYE             reduce using rule 46 (statement -> RETURN exprseq ; .)
    STRING          reduce using rule 46 (statement -> RETURN exprseq ; .)
    FLOATNUM        reduce using rule 46 (statement -> RETURN exprseq ; .)
    INTNUM          reduce using rule 46 (statement -> RETURN exprseq ; .)
    ID              reduce using rule 46 (statement -> RETURN exprseq ; .)
    SUB             reduce using rule 46 (statement -> RETURN exprseq ; .)
    (               reduce using rule 46 (statement -> RETURN exprseq ; .)
    [               reduce using rule 46 (statement -> RETURN exprseq ; .)
    $end            reduce using rule 46 (statement -> RETURN exprseq ; .)
    }               reduce using rule 46 (statement -> RETURN exprseq ; .)
    ELSE            reduce using rule 46 (statement -> RETURN exprseq ; .)


state 90

    (29) exprseq -> exprseq , . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 106
    array                          shift and go to state 15

state 91

    (47) statement -> PRINT exprseq ; .
    {               reduce using rule 47 (statement -> PRINT exprseq ; .)
    FOR             reduce using rule 47 (statement -> PRINT exprseq ; .)
    WHILE           reduce using rule 47 (statement -> PRINT exprseq ; .)
    IF              reduce using rule 47 (statement -> PRINT exprseq ; .)
    CONTINUE        reduce using rule 47 (statement -> PRINT exprseq ; .)
    BREAK           reduce using rule 47 (statement -> PRINT exprseq ; .)
    RETURN          reduce using rule 47 (statement -> PRINT exprseq ; .)
    PRINT           reduce using rule 47 (statement -> PRINT exprseq ; .)
    ZEROS           reduce using rule 47 (statement -> PRINT exprseq ; .)
    ONES            reduce using rule 47 (statement -> PRINT exprseq ; .)
    EYE             reduce using rule 47 (statement -> PRINT exprseq ; .)
    STRING          reduce using rule 47 (statement -> PRINT exprseq ; .)
    FLOATNUM        reduce using rule 47 (statement -> PRINT exprseq ; .)
    INTNUM          reduce using rule 47 (statement -> PRINT exprseq ; .)
    ID              reduce using rule 47 (statement -> PRINT exprseq ; .)
    SUB             reduce using rule 47 (statement -> PRINT exprseq ; .)
    (               reduce using rule 47 (statement -> PRINT exprseq ; .)
    [               reduce using rule 47 (statement -> PRINT exprseq ; .)
    $end            reduce using rule 47 (statement -> PRINT exprseq ; .)
    }               reduce using rule 47 (statement -> PRINT exprseq ; .)
    ELSE            reduce using rule 47 (statement -> PRINT exprseq ; .)


state 92

    (31) array -> [ elements ] .
    IDIV            reduce using rule 31 (array -> [ elements ] .)
    IMUL            reduce using rule 31 (array -> [ elements ] .)
    ISUB            reduce using rule 31 (array -> [ elements ] .)
    IADD            reduce using rule 31 (array -> [ elements ] .)
    =               reduce using rule 31 (array -> [ elements ] .)
    [               reduce using rule 31 (array -> [ elements ] .)
    '               reduce using rule 31 (array -> [ elements ] .)
    :               reduce using rule 31 (array -> [ elements ] .)
    LE              reduce using rule 31 (array -> [ elements ] .)
    LT              reduce using rule 31 (array -> [ elements ] .)
    GE              reduce using rule 31 (array -> [ elements ] .)
    GT              reduce using rule 31 (array -> [ elements ] .)
    NE              reduce using rule 31 (array -> [ elements ] .)
    EQ              reduce using rule 31 (array -> [ elements ] .)
    DDIV            reduce using rule 31 (array -> [ elements ] .)
    DMUL            reduce using rule 31 (array -> [ elements ] .)
    DSUB            reduce using rule 31 (array -> [ elements ] .)
    DADD            reduce using rule 31 (array -> [ elements ] .)
    DIV             reduce using rule 31 (array -> [ elements ] .)
    MUL             reduce using rule 31 (array -> [ elements ] .)
    SUB             reduce using rule 31 (array -> [ elements ] .)
    ADD             reduce using rule 31 (array -> [ elements ] .)
    )               reduce using rule 31 (array -> [ elements ] .)
    ;               reduce using rule 31 (array -> [ elements ] .)
    ,               reduce using rule 31 (array -> [ elements ] .)
    ]               reduce using rule 31 (array -> [ elements ] .)
    {               reduce using rule 31 (array -> [ elements ] .)
    FOR             reduce using rule 31 (array -> [ elements ] .)
    WHILE           reduce using rule 31 (array -> [ elements ] .)
    IF              reduce using rule 31 (array -> [ elements ] .)
    CONTINUE        reduce using rule 31 (array -> [ elements ] .)
    BREAK           reduce using rule 31 (array -> [ elements ] .)
    RETURN          reduce using rule 31 (array -> [ elements ] .)
    PRINT           reduce using rule 31 (array -> [ elements ] .)
    ZEROS           reduce using rule 31 (array -> [ elements ] .)
    ONES            reduce using rule 31 (array -> [ elements ] .)
    EYE             reduce using rule 31 (array -> [ elements ] .)
    STRING          reduce using rule 31 (array -> [ elements ] .)
    FLOATNUM        reduce using rule 31 (array -> [ elements ] .)
    INTNUM          reduce using rule 31 (array -> [ elements ] .)
    ID              reduce using rule 31 (array -> [ elements ] .)
    (               reduce using rule 31 (array -> [ elements ] .)


state 93

    (32) elements -> elements , . expr
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 107
    array                          shift and go to state 15

state 94

    (4) expr -> ZEROS ( expr . )
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    )               shift and go to state 108
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 95

    (5) expr -> ONES ( expr . )
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    )               shift and go to state 109
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 96

    (6) expr -> EYE ( expr . )
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    )               shift and go to state 110
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 97

    (35) statement -> FOR ID = exprseq . statement
    (29) exprseq -> exprseq . , expr
    (34) statement -> . { statementseq }
    (35) statement -> . FOR ID = exprseq statement
    (36) statement -> . WHILE ( expr ) statement
    (37) statement -> . IF ( expr ) statement ELSE statement
    (38) statement -> . IF ( expr ) statement
    (39) statement -> . expr IDIV expr ;
    (40) statement -> . expr IMUL expr ;
    (41) statement -> . expr ISUB expr ;
    (42) statement -> . expr IADD expr ;
    (43) statement -> . expr = expr ;
    (44) statement -> . CONTINUE ;
    (45) statement -> . BREAK ;
    (46) statement -> . RETURN exprseq ;
    (47) statement -> . PRINT exprseq ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    ,               shift and go to state 90
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    statement                      shift and go to state 111
    expr                           shift and go to state 9
    array                          shift and go to state 15

state 98

    (36) statement -> WHILE ( expr ) . statement
    (34) statement -> . { statementseq }
    (35) statement -> . FOR ID = exprseq statement
    (36) statement -> . WHILE ( expr ) statement
    (37) statement -> . IF ( expr ) statement ELSE statement
    (38) statement -> . IF ( expr ) statement
    (39) statement -> . expr IDIV expr ;
    (40) statement -> . expr IMUL expr ;
    (41) statement -> . expr ISUB expr ;
    (42) statement -> . expr IADD expr ;
    (43) statement -> . expr = expr ;
    (44) statement -> . CONTINUE ;
    (45) statement -> . BREAK ;
    (46) statement -> . RETURN exprseq ;
    (47) statement -> . PRINT exprseq ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 9
    statement                      shift and go to state 112
    array                          shift and go to state 15

state 99

    (39) statement -> expr IDIV expr ; .
    {               reduce using rule 39 (statement -> expr IDIV expr ; .)
    FOR             reduce using rule 39 (statement -> expr IDIV expr ; .)
    WHILE           reduce using rule 39 (statement -> expr IDIV expr ; .)
    IF              reduce using rule 39 (statement -> expr IDIV expr ; .)
    CONTINUE        reduce using rule 39 (statement -> expr IDIV expr ; .)
    BREAK           reduce using rule 39 (statement -> expr IDIV expr ; .)
    RETURN          reduce using rule 39 (statement -> expr IDIV expr ; .)
    PRINT           reduce using rule 39 (statement -> expr IDIV expr ; .)
    ZEROS           reduce using rule 39 (statement -> expr IDIV expr ; .)
    ONES            reduce using rule 39 (statement -> expr IDIV expr ; .)
    EYE             reduce using rule 39 (statement -> expr IDIV expr ; .)
    STRING          reduce using rule 39 (statement -> expr IDIV expr ; .)
    FLOATNUM        reduce using rule 39 (statement -> expr IDIV expr ; .)
    INTNUM          reduce using rule 39 (statement -> expr IDIV expr ; .)
    ID              reduce using rule 39 (statement -> expr IDIV expr ; .)
    SUB             reduce using rule 39 (statement -> expr IDIV expr ; .)
    (               reduce using rule 39 (statement -> expr IDIV expr ; .)
    [               reduce using rule 39 (statement -> expr IDIV expr ; .)
    $end            reduce using rule 39 (statement -> expr IDIV expr ; .)
    }               reduce using rule 39 (statement -> expr IDIV expr ; .)
    ELSE            reduce using rule 39 (statement -> expr IDIV expr ; .)


state 100

    (40) statement -> expr IMUL expr ; .
    {               reduce using rule 40 (statement -> expr IMUL expr ; .)
    FOR             reduce using rule 40 (statement -> expr IMUL expr ; .)
    WHILE           reduce using rule 40 (statement -> expr IMUL expr ; .)
    IF              reduce using rule 40 (statement -> expr IMUL expr ; .)
    CONTINUE        reduce using rule 40 (statement -> expr IMUL expr ; .)
    BREAK           reduce using rule 40 (statement -> expr IMUL expr ; .)
    RETURN          reduce using rule 40 (statement -> expr IMUL expr ; .)
    PRINT           reduce using rule 40 (statement -> expr IMUL expr ; .)
    ZEROS           reduce using rule 40 (statement -> expr IMUL expr ; .)
    ONES            reduce using rule 40 (statement -> expr IMUL expr ; .)
    EYE             reduce using rule 40 (statement -> expr IMUL expr ; .)
    STRING          reduce using rule 40 (statement -> expr IMUL expr ; .)
    FLOATNUM        reduce using rule 40 (statement -> expr IMUL expr ; .)
    INTNUM          reduce using rule 40 (statement -> expr IMUL expr ; .)
    ID              reduce using rule 40 (statement -> expr IMUL expr ; .)
    SUB             reduce using rule 40 (statement -> expr IMUL expr ; .)
    (               reduce using rule 40 (statement -> expr IMUL expr ; .)
    [               reduce using rule 40 (statement -> expr IMUL expr ; .)
    $end            reduce using rule 40 (statement -> expr IMUL expr ; .)
    }               reduce using rule 40 (statement -> expr IMUL expr ; .)
    ELSE            reduce using rule 40 (statement -> expr IMUL expr ; .)


state 101

    (41) statement -> expr ISUB expr ; .
    {               reduce using rule 41 (statement -> expr ISUB expr ; .)
    FOR             reduce using rule 41 (statement -> expr ISUB expr ; .)
    WHILE           reduce using rule 41 (statement -> expr ISUB expr ; .)
    IF              reduce using rule 41 (statement -> expr ISUB expr ; .)
    CONTINUE        reduce using rule 41 (statement -> expr ISUB expr ; .)
    BREAK           reduce using rule 41 (statement -> expr ISUB expr ; .)
    RETURN          reduce using rule 41 (statement -> expr ISUB expr ; .)
    PRINT           reduce using rule 41 (statement -> expr ISUB expr ; .)
    ZEROS           reduce using rule 41 (statement -> expr ISUB expr ; .)
    ONES            reduce using rule 41 (statement -> expr ISUB expr ; .)
    EYE             reduce using rule 41 (statement -> expr ISUB expr ; .)
    STRING          reduce using rule 41 (statement -> expr ISUB expr ; .)
    FLOATNUM        reduce using rule 41 (statement -> expr ISUB expr ; .)
    INTNUM          reduce using rule 41 (statement -> expr ISUB expr ; .)
    ID              reduce using rule 41 (statement -> expr ISUB expr ; .)
    SUB             reduce using rule 41 (statement -> expr ISUB expr ; .)
    (               reduce using rule 41 (statement -> expr ISUB expr ; .)
    [               reduce using rule 41 (statement -> expr ISUB expr ; .)
    $end            reduce using rule 41 (statement -> expr ISUB expr ; .)
    }               reduce using rule 41 (statement -> expr ISUB expr ; .)
    ELSE            reduce using rule 41 (statement -> expr ISUB expr ; .)


state 102

    (42) statement -> expr IADD expr ; .
    {               reduce using rule 42 (statement -> expr IADD expr ; .)
    FOR             reduce using rule 42 (statement -> expr IADD expr ; .)
    WHILE           reduce using rule 42 (statement -> expr IADD expr ; .)
    IF              reduce using rule 42 (statement -> expr IADD expr ; .)
    CONTINUE        reduce using rule 42 (statement -> expr IADD expr ; .)
    BREAK           reduce using rule 42 (statement -> expr IADD expr ; .)
    RETURN          reduce using rule 42 (statement -> expr IADD expr ; .)
    PRINT           reduce using rule 42 (statement -> expr IADD expr ; .)
    ZEROS           reduce using rule 42 (statement -> expr IADD expr ; .)
    ONES            reduce using rule 42 (statement -> expr IADD expr ; .)
    EYE             reduce using rule 42 (statement -> expr IADD expr ; .)
    STRING          reduce using rule 42 (statement -> expr IADD expr ; .)
    FLOATNUM        reduce using rule 42 (statement -> expr IADD expr ; .)
    INTNUM          reduce using rule 42 (statement -> expr IADD expr ; .)
    ID              reduce using rule 42 (statement -> expr IADD expr ; .)
    SUB             reduce using rule 42 (statement -> expr IADD expr ; .)
    (               reduce using rule 42 (statement -> expr IADD expr ; .)
    [               reduce using rule 42 (statement -> expr IADD expr ; .)
    $end            reduce using rule 42 (statement -> expr IADD expr ; .)
    }               reduce using rule 42 (statement -> expr IADD expr ; .)
    ELSE            reduce using rule 42 (statement -> expr IADD expr ; .)


state 103

    (43) statement -> expr = expr ; .
    {               reduce using rule 43 (statement -> expr = expr ; .)
    FOR             reduce using rule 43 (statement -> expr = expr ; .)
    WHILE           reduce using rule 43 (statement -> expr = expr ; .)
    IF              reduce using rule 43 (statement -> expr = expr ; .)
    CONTINUE        reduce using rule 43 (statement -> expr = expr ; .)
    BREAK           reduce using rule 43 (statement -> expr = expr ; .)
    RETURN          reduce using rule 43 (statement -> expr = expr ; .)
    PRINT           reduce using rule 43 (statement -> expr = expr ; .)
    ZEROS           reduce using rule 43 (statement -> expr = expr ; .)
    ONES            reduce using rule 43 (statement -> expr = expr ; .)
    EYE             reduce using rule 43 (statement -> expr = expr ; .)
    STRING          reduce using rule 43 (statement -> expr = expr ; .)
    FLOATNUM        reduce using rule 43 (statement -> expr = expr ; .)
    INTNUM          reduce using rule 43 (statement -> expr = expr ; .)
    ID              reduce using rule 43 (statement -> expr = expr ; .)
    SUB             reduce using rule 43 (statement -> expr = expr ; .)
    (               reduce using rule 43 (statement -> expr = expr ; .)
    [               reduce using rule 43 (statement -> expr = expr ; .)
    $end            reduce using rule 43 (statement -> expr = expr ; .)
    }               reduce using rule 43 (statement -> expr = expr ; .)
    ELSE            reduce using rule 43 (statement -> expr = expr ; .)


state 104

    (3) expr -> expr [ exprseq ] .
    IDIV            reduce using rule 3 (expr -> expr [ exprseq ] .)
    IMUL            reduce using rule 3 (expr -> expr [ exprseq ] .)
    ISUB            reduce using rule 3 (expr -> expr [ exprseq ] .)
    IADD            reduce using rule 3 (expr -> expr [ exprseq ] .)
    =               reduce using rule 3 (expr -> expr [ exprseq ] .)
    [               reduce using rule 3 (expr -> expr [ exprseq ] .)
    '               reduce using rule 3 (expr -> expr [ exprseq ] .)
    :               reduce using rule 3 (expr -> expr [ exprseq ] .)
    LE              reduce using rule 3 (expr -> expr [ exprseq ] .)
    LT              reduce using rule 3 (expr -> expr [ exprseq ] .)
    GE              reduce using rule 3 (expr -> expr [ exprseq ] .)
    GT              reduce using rule 3 (expr -> expr [ exprseq ] .)
    NE              reduce using rule 3 (expr -> expr [ exprseq ] .)
    EQ              reduce using rule 3 (expr -> expr [ exprseq ] .)
    DDIV            reduce using rule 3 (expr -> expr [ exprseq ] .)
    DMUL            reduce using rule 3 (expr -> expr [ exprseq ] .)
    DSUB            reduce using rule 3 (expr -> expr [ exprseq ] .)
    DADD            reduce using rule 3 (expr -> expr [ exprseq ] .)
    DIV             reduce using rule 3 (expr -> expr [ exprseq ] .)
    MUL             reduce using rule 3 (expr -> expr [ exprseq ] .)
    SUB             reduce using rule 3 (expr -> expr [ exprseq ] .)
    ADD             reduce using rule 3 (expr -> expr [ exprseq ] .)
    )               reduce using rule 3 (expr -> expr [ exprseq ] .)
    ;               reduce using rule 3 (expr -> expr [ exprseq ] .)
    ,               reduce using rule 3 (expr -> expr [ exprseq ] .)
    ]               reduce using rule 3 (expr -> expr [ exprseq ] .)
    {               reduce using rule 3 (expr -> expr [ exprseq ] .)
    FOR             reduce using rule 3 (expr -> expr [ exprseq ] .)
    WHILE           reduce using rule 3 (expr -> expr [ exprseq ] .)
    IF              reduce using rule 3 (expr -> expr [ exprseq ] .)
    CONTINUE        reduce using rule 3 (expr -> expr [ exprseq ] .)
    BREAK           reduce using rule 3 (expr -> expr [ exprseq ] .)
    RETURN          reduce using rule 3 (expr -> expr [ exprseq ] .)
    PRINT           reduce using rule 3 (expr -> expr [ exprseq ] .)
    ZEROS           reduce using rule 3 (expr -> expr [ exprseq ] .)
    ONES            reduce using rule 3 (expr -> expr [ exprseq ] .)
    EYE             reduce using rule 3 (expr -> expr [ exprseq ] .)
    STRING          reduce using rule 3 (expr -> expr [ exprseq ] .)
    FLOATNUM        reduce using rule 3 (expr -> expr [ exprseq ] .)
    INTNUM          reduce using rule 3 (expr -> expr [ exprseq ] .)
    ID              reduce using rule 3 (expr -> expr [ exprseq ] .)
    (               reduce using rule 3 (expr -> expr [ exprseq ] .)


state 105

    (37) statement -> IF ( expr ) . statement ELSE statement
    (38) statement -> IF ( expr ) . statement
    (34) statement -> . { statementseq }
    (35) statement -> . FOR ID = exprseq statement
    (36) statement -> . WHILE ( expr ) statement
    (37) statement -> . IF ( expr ) statement ELSE statement
    (38) statement -> . IF ( expr ) statement
    (39) statement -> . expr IDIV expr ;
    (40) statement -> . expr IMUL expr ;
    (41) statement -> . expr ISUB expr ;
    (42) statement -> . expr IADD expr ;
    (43) statement -> . expr = expr ;
    (44) statement -> . CONTINUE ;
    (45) statement -> . BREAK ;
    (46) statement -> . RETURN exprseq ;
    (47) statement -> . PRINT exprseq ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 9
    statement                      shift and go to state 113
    array                          shift and go to state 15

state 106

    (29) exprseq -> exprseq , expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ;               reduce using rule 29 (exprseq -> exprseq , expr .)
    ,               reduce using rule 29 (exprseq -> exprseq , expr .)
    ]               reduce using rule 29 (exprseq -> exprseq , expr .)
    {               reduce using rule 29 (exprseq -> exprseq , expr .)
    FOR             reduce using rule 29 (exprseq -> exprseq , expr .)
    WHILE           reduce using rule 29 (exprseq -> exprseq , expr .)
    IF              reduce using rule 29 (exprseq -> exprseq , expr .)
    CONTINUE        reduce using rule 29 (exprseq -> exprseq , expr .)
    BREAK           reduce using rule 29 (exprseq -> exprseq , expr .)
    RETURN          reduce using rule 29 (exprseq -> exprseq , expr .)
    PRINT           reduce using rule 29 (exprseq -> exprseq , expr .)
    ZEROS           reduce using rule 29 (exprseq -> exprseq , expr .)
    ONES            reduce using rule 29 (exprseq -> exprseq , expr .)
    EYE             reduce using rule 29 (exprseq -> exprseq , expr .)
    STRING          reduce using rule 29 (exprseq -> exprseq , expr .)
    FLOATNUM        reduce using rule 29 (exprseq -> exprseq , expr .)
    INTNUM          reduce using rule 29 (exprseq -> exprseq , expr .)
    ID              reduce using rule 29 (exprseq -> exprseq , expr .)
    (               reduce using rule 29 (exprseq -> exprseq , expr .)
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 107

    (32) elements -> elements , expr .
    (3) expr -> expr . [ exprseq ]
    (11) expr -> expr . '
    (14) expr -> expr . : expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . LT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . GT expr
    (19) expr -> expr . NE expr
    (20) expr -> expr . EQ expr
    (21) expr -> expr . DDIV expr
    (22) expr -> expr . DMUL expr
    (23) expr -> expr . DSUB expr
    (24) expr -> expr . DADD expr
    (25) expr -> expr . DIV expr
    (26) expr -> expr . MUL expr
    (27) expr -> expr . SUB expr
    (28) expr -> expr . ADD expr
    ]               reduce using rule 32 (elements -> elements , expr .)
    ,               reduce using rule 32 (elements -> elements , expr .)
    [               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    LE              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    GT              shift and go to state 40
    NE              shift and go to state 41
    EQ              shift and go to state 42
    DDIV            shift and go to state 43
    DMUL            shift and go to state 44
    DSUB            shift and go to state 45
    DADD            shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 48
    SUB             shift and go to state 49
    ADD             shift and go to state 50


state 108

    (4) expr -> ZEROS ( expr ) .
    IDIV            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    IMUL            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ISUB            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    IADD            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    =               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    [               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    '               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    :               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    LE              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    LT              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    GE              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    GT              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    NE              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    EQ              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    DDIV            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    DMUL            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    DSUB            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    DADD            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    DIV             reduce using rule 4 (expr -> ZEROS ( expr ) .)
    MUL             reduce using rule 4 (expr -> ZEROS ( expr ) .)
    SUB             reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ADD             reduce using rule 4 (expr -> ZEROS ( expr ) .)
    )               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ;               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ,               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ]               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    {               reduce using rule 4 (expr -> ZEROS ( expr ) .)
    FOR             reduce using rule 4 (expr -> ZEROS ( expr ) .)
    WHILE           reduce using rule 4 (expr -> ZEROS ( expr ) .)
    IF              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    CONTINUE        reduce using rule 4 (expr -> ZEROS ( expr ) .)
    BREAK           reduce using rule 4 (expr -> ZEROS ( expr ) .)
    RETURN          reduce using rule 4 (expr -> ZEROS ( expr ) .)
    PRINT           reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ZEROS           reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ONES            reduce using rule 4 (expr -> ZEROS ( expr ) .)
    EYE             reduce using rule 4 (expr -> ZEROS ( expr ) .)
    STRING          reduce using rule 4 (expr -> ZEROS ( expr ) .)
    FLOATNUM        reduce using rule 4 (expr -> ZEROS ( expr ) .)
    INTNUM          reduce using rule 4 (expr -> ZEROS ( expr ) .)
    ID              reduce using rule 4 (expr -> ZEROS ( expr ) .)
    (               reduce using rule 4 (expr -> ZEROS ( expr ) .)


state 109

    (5) expr -> ONES ( expr ) .
    IDIV            reduce using rule 5 (expr -> ONES ( expr ) .)
    IMUL            reduce using rule 5 (expr -> ONES ( expr ) .)
    ISUB            reduce using rule 5 (expr -> ONES ( expr ) .)
    IADD            reduce using rule 5 (expr -> ONES ( expr ) .)
    =               reduce using rule 5 (expr -> ONES ( expr ) .)
    [               reduce using rule 5 (expr -> ONES ( expr ) .)
    '               reduce using rule 5 (expr -> ONES ( expr ) .)
    :               reduce using rule 5 (expr -> ONES ( expr ) .)
    LE              reduce using rule 5 (expr -> ONES ( expr ) .)
    LT              reduce using rule 5 (expr -> ONES ( expr ) .)
    GE              reduce using rule 5 (expr -> ONES ( expr ) .)
    GT              reduce using rule 5 (expr -> ONES ( expr ) .)
    NE              reduce using rule 5 (expr -> ONES ( expr ) .)
    EQ              reduce using rule 5 (expr -> ONES ( expr ) .)
    DDIV            reduce using rule 5 (expr -> ONES ( expr ) .)
    DMUL            reduce using rule 5 (expr -> ONES ( expr ) .)
    DSUB            reduce using rule 5 (expr -> ONES ( expr ) .)
    DADD            reduce using rule 5 (expr -> ONES ( expr ) .)
    DIV             reduce using rule 5 (expr -> ONES ( expr ) .)
    MUL             reduce using rule 5 (expr -> ONES ( expr ) .)
    SUB             reduce using rule 5 (expr -> ONES ( expr ) .)
    ADD             reduce using rule 5 (expr -> ONES ( expr ) .)
    )               reduce using rule 5 (expr -> ONES ( expr ) .)
    ;               reduce using rule 5 (expr -> ONES ( expr ) .)
    ,               reduce using rule 5 (expr -> ONES ( expr ) .)
    ]               reduce using rule 5 (expr -> ONES ( expr ) .)
    {               reduce using rule 5 (expr -> ONES ( expr ) .)
    FOR             reduce using rule 5 (expr -> ONES ( expr ) .)
    WHILE           reduce using rule 5 (expr -> ONES ( expr ) .)
    IF              reduce using rule 5 (expr -> ONES ( expr ) .)
    CONTINUE        reduce using rule 5 (expr -> ONES ( expr ) .)
    BREAK           reduce using rule 5 (expr -> ONES ( expr ) .)
    RETURN          reduce using rule 5 (expr -> ONES ( expr ) .)
    PRINT           reduce using rule 5 (expr -> ONES ( expr ) .)
    ZEROS           reduce using rule 5 (expr -> ONES ( expr ) .)
    ONES            reduce using rule 5 (expr -> ONES ( expr ) .)
    EYE             reduce using rule 5 (expr -> ONES ( expr ) .)
    STRING          reduce using rule 5 (expr -> ONES ( expr ) .)
    FLOATNUM        reduce using rule 5 (expr -> ONES ( expr ) .)
    INTNUM          reduce using rule 5 (expr -> ONES ( expr ) .)
    ID              reduce using rule 5 (expr -> ONES ( expr ) .)
    (               reduce using rule 5 (expr -> ONES ( expr ) .)


state 110

    (6) expr -> EYE ( expr ) .
    IDIV            reduce using rule 6 (expr -> EYE ( expr ) .)
    IMUL            reduce using rule 6 (expr -> EYE ( expr ) .)
    ISUB            reduce using rule 6 (expr -> EYE ( expr ) .)
    IADD            reduce using rule 6 (expr -> EYE ( expr ) .)
    =               reduce using rule 6 (expr -> EYE ( expr ) .)
    [               reduce using rule 6 (expr -> EYE ( expr ) .)
    '               reduce using rule 6 (expr -> EYE ( expr ) .)
    :               reduce using rule 6 (expr -> EYE ( expr ) .)
    LE              reduce using rule 6 (expr -> EYE ( expr ) .)
    LT              reduce using rule 6 (expr -> EYE ( expr ) .)
    GE              reduce using rule 6 (expr -> EYE ( expr ) .)
    GT              reduce using rule 6 (expr -> EYE ( expr ) .)
    NE              reduce using rule 6 (expr -> EYE ( expr ) .)
    EQ              reduce using rule 6 (expr -> EYE ( expr ) .)
    DDIV            reduce using rule 6 (expr -> EYE ( expr ) .)
    DMUL            reduce using rule 6 (expr -> EYE ( expr ) .)
    DSUB            reduce using rule 6 (expr -> EYE ( expr ) .)
    DADD            reduce using rule 6 (expr -> EYE ( expr ) .)
    DIV             reduce using rule 6 (expr -> EYE ( expr ) .)
    MUL             reduce using rule 6 (expr -> EYE ( expr ) .)
    SUB             reduce using rule 6 (expr -> EYE ( expr ) .)
    ADD             reduce using rule 6 (expr -> EYE ( expr ) .)
    )               reduce using rule 6 (expr -> EYE ( expr ) .)
    ;               reduce using rule 6 (expr -> EYE ( expr ) .)
    ,               reduce using rule 6 (expr -> EYE ( expr ) .)
    ]               reduce using rule 6 (expr -> EYE ( expr ) .)
    {               reduce using rule 6 (expr -> EYE ( expr ) .)
    FOR             reduce using rule 6 (expr -> EYE ( expr ) .)
    WHILE           reduce using rule 6 (expr -> EYE ( expr ) .)
    IF              reduce using rule 6 (expr -> EYE ( expr ) .)
    CONTINUE        reduce using rule 6 (expr -> EYE ( expr ) .)
    BREAK           reduce using rule 6 (expr -> EYE ( expr ) .)
    RETURN          reduce using rule 6 (expr -> EYE ( expr ) .)
    PRINT           reduce using rule 6 (expr -> EYE ( expr ) .)
    ZEROS           reduce using rule 6 (expr -> EYE ( expr ) .)
    ONES            reduce using rule 6 (expr -> EYE ( expr ) .)
    EYE             reduce using rule 6 (expr -> EYE ( expr ) .)
    STRING          reduce using rule 6 (expr -> EYE ( expr ) .)
    FLOATNUM        reduce using rule 6 (expr -> EYE ( expr ) .)
    INTNUM          reduce using rule 6 (expr -> EYE ( expr ) .)
    ID              reduce using rule 6 (expr -> EYE ( expr ) .)
    (               reduce using rule 6 (expr -> EYE ( expr ) .)


state 111

    (35) statement -> FOR ID = exprseq statement .
    {               reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    FOR             reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    WHILE           reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    IF              reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    CONTINUE        reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    BREAK           reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    RETURN          reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    PRINT           reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    ZEROS           reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    ONES            reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    EYE             reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    STRING          reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    FLOATNUM        reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    INTNUM          reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    ID              reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    SUB             reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    (               reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    [               reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    $end            reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    }               reduce using rule 35 (statement -> FOR ID = exprseq statement .)
    ELSE            reduce using rule 35 (statement -> FOR ID = exprseq statement .)


state 112

    (36) statement -> WHILE ( expr ) statement .
    {               reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    FOR             reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    WHILE           reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    IF              reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    CONTINUE        reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    BREAK           reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    RETURN          reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    PRINT           reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    ZEROS           reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    ONES            reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    EYE             reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    STRING          reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    FLOATNUM        reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    INTNUM          reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    ID              reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    SUB             reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    (               reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    [               reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    $end            reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    }               reduce using rule 36 (statement -> WHILE ( expr ) statement .)
    ELSE            reduce using rule 36 (statement -> WHILE ( expr ) statement .)


state 113

    (37) statement -> IF ( expr ) statement . ELSE statement
    (38) statement -> IF ( expr ) statement .
    ELSE            shift and go to state 114
    {               reduce using rule 38 (statement -> IF ( expr ) statement .)
    FOR             reduce using rule 38 (statement -> IF ( expr ) statement .)
    WHILE           reduce using rule 38 (statement -> IF ( expr ) statement .)
    IF              reduce using rule 38 (statement -> IF ( expr ) statement .)
    CONTINUE        reduce using rule 38 (statement -> IF ( expr ) statement .)
    BREAK           reduce using rule 38 (statement -> IF ( expr ) statement .)
    RETURN          reduce using rule 38 (statement -> IF ( expr ) statement .)
    PRINT           reduce using rule 38 (statement -> IF ( expr ) statement .)
    ZEROS           reduce using rule 38 (statement -> IF ( expr ) statement .)
    ONES            reduce using rule 38 (statement -> IF ( expr ) statement .)
    EYE             reduce using rule 38 (statement -> IF ( expr ) statement .)
    STRING          reduce using rule 38 (statement -> IF ( expr ) statement .)
    FLOATNUM        reduce using rule 38 (statement -> IF ( expr ) statement .)
    INTNUM          reduce using rule 38 (statement -> IF ( expr ) statement .)
    ID              reduce using rule 38 (statement -> IF ( expr ) statement .)
    SUB             reduce using rule 38 (statement -> IF ( expr ) statement .)
    (               reduce using rule 38 (statement -> IF ( expr ) statement .)
    [               reduce using rule 38 (statement -> IF ( expr ) statement .)
    $end            reduce using rule 38 (statement -> IF ( expr ) statement .)
    }               reduce using rule 38 (statement -> IF ( expr ) statement .)


state 114

    (37) statement -> IF ( expr ) statement ELSE . statement
    (34) statement -> . { statementseq }
    (35) statement -> . FOR ID = exprseq statement
    (36) statement -> . WHILE ( expr ) statement
    (37) statement -> . IF ( expr ) statement ELSE statement
    (38) statement -> . IF ( expr ) statement
    (39) statement -> . expr IDIV expr ;
    (40) statement -> . expr IMUL expr ;
    (41) statement -> . expr ISUB expr ;
    (42) statement -> . expr IADD expr ;
    (43) statement -> . expr = expr ;
    (44) statement -> . CONTINUE ;
    (45) statement -> . BREAK ;
    (46) statement -> . RETURN exprseq ;
    (47) statement -> . PRINT exprseq ;
    (2) expr -> . array
    (3) expr -> . expr [ exprseq ]
    (4) expr -> . ZEROS ( expr )
    (5) expr -> . ONES ( expr )
    (6) expr -> . EYE ( expr )
    (7) expr -> . STRING
    (8) expr -> . FLOATNUM
    (9) expr -> . INTNUM
    (10) expr -> . ID
    (11) expr -> . expr '
    (12) expr -> . SUB expr
    (13) expr -> . ( expr )
    (14) expr -> . expr : expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr LT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr GT expr
    (19) expr -> . expr NE expr
    (20) expr -> . expr EQ expr
    (21) expr -> . expr DDIV expr
    (22) expr -> . expr DMUL expr
    (23) expr -> . expr DSUB expr
    (24) expr -> . expr DADD expr
    (25) expr -> . expr DIV expr
    (26) expr -> . expr MUL expr
    (27) expr -> . expr SUB expr
    (28) expr -> . expr ADD expr
    (31) array -> . [ elements ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOATNUM        shift and go to state 21
    INTNUM          shift and go to state 22
    ID              shift and go to state 6
    SUB             shift and go to state 23
    (               shift and go to state 8
    [               shift and go to state 16

    expr                           shift and go to state 9
    statement                      shift and go to state 115
    array                          shift and go to state 15

state 115

    (37) statement -> IF ( expr ) statement ELSE statement .
    {               reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    FOR             reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    WHILE           reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    IF              reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    CONTINUE        reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    BREAK           reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    RETURN          reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    PRINT           reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    ZEROS           reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    ONES            reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    EYE             reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    STRING          reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    FLOATNUM        reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    INTNUM          reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    ID              reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    SUB             reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    (               reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    [               reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    $end            reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    }               reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)
    ELSE            reduce using rule 37 (statement -> IF ( expr ) statement ELSE statement .)


Conflicts:

shift/reduce conflict for [ in state 55 resolved as shift
shift/reduce conflict for SUB in state 55 resolved as shift
shift/reduce conflict for [ in state 106 resolved as shift
shift/reduce conflict for SUB in state 106 resolved as shift